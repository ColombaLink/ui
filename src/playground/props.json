{
  "props": {
    "AccordionItemProps": {
      "name": "AccordionItemProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "checked": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type AccordionItemProps = {\n  label?: string\n  children?: ReactNode\n  space?: Space\n  checked?: boolean\n  style?: CSSProperties\n}",
      "file": "/components/Accordion/index.tsx"
    },
    "AccordionProps": {
      "name": "AccordionProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type AccordionProps = {\n  children?: ReactNode\n  space?: Space\n  style?: CSSProperties\n}",
      "file": "/components/Accordion/index.tsx"
    },
    "AuthProps": {
      "name": "AuthProps",
      "props": {
        "onLogin": {
          "optional": true,
          "type": "function"
        },
        "onRegister": {
          "optional": true,
          "type": "function"
        },
        "register": {
          "optional": true,
          "type": "boolean"
        },
        "onResetRequest": {
          "optional": true,
          "type": "function"
        },
        "logo": {
          "optional": true,
          "type": [
            "boolean",
            "ReactChild"
          ]
        },
        "overlay": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "app": {
          "optional": true,
          "type": "FC"
        }
      },
      "code": "type AuthProps = {\n  onLogin?: (props: { token: string; refreshToken: string }) => void\n  onRegister?: (data: { email: string; password: string; name: string }) => void\n  register?: boolean\n  onResetRequest?: () => void\n  logo?: boolean | ReactChild\n  overlay?: boolean\n  style?: CSSProperties\n  app?: FC<any | { user: { id: string; email: string } }>\n}",
      "file": "/components/Auth/Auth.tsx"
    },
    "LoginProps": {
      "name": "LoginProps",
      "props": {
        "width": {
          "optional": true,
          "type": "number"
        },
        "onLogin": {
          "optional": true,
          "type": "function"
        },
        "onRegisterRequest": {
          "optional": true,
          "type": "function"
        },
        "onResetRequest": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type LoginProps = {\n  width?: number\n  onLogin?: (props: { token: string; refreshToken: string }) => void\n  onRegisterRequest?: (email: string) => void\n  onResetRequest?: () => void\n}",
      "file": "/components/Auth/Login.tsx"
    },
    "RegisterProps": {
      "name": "RegisterProps",
      "props": {
        "width": {
          "optional": true,
          "type": "number"
        },
        "email": {
          "optional": true,
          "type": "string"
        },
        "onRegister": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type RegisterProps = {\n  width?: number\n  email?: string\n  onRegister?: (data: { email: string; password: string; name: string }) => void\n}",
      "file": "/components/Auth/Register.tsx"
    },
    "ResetRequestProps": {
      "name": "ResetRequestProps",
      "props": {
        "onSuccess": {
          "optional": true,
          "type": "function"
        },
        "onCancel": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type ResetRequestProps = {\n  onSuccess?: () => void\n  onCancel?: () => void\n  style?: CSSProperties\n}",
      "file": "/components/Auth/ResetRequest.tsx"
    },
    "AvatarProps": {
      "name": "AvatarProps",
      "props": {
        "size": {
          "optional": true,
          "type": "AvatarSize"
        },
        "color": {
          "optional": true,
          "type": "AccentColor"
        },
        "img": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type AvatarProps = {\n  size?: AvatarSize\n  color?: AccentColor\n  img?: string\n  icon?: FC | ReactNode\n  space?: Space\n  label?: string\n  onClick?: (e: SyntheticEvent) => void\n  style?: CSSProperties\n}",
      "file": "/components/Avatar/index.tsx"
    },
    "BadgeProps": {
      "name": "BadgeProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "AccentColor"
        },
        "boxed": {
          "optional": true,
          "type": "boolean"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "MouseEventHandler"
        }
      },
      "code": "type BadgeProps = {\n  children: ReactNode\n  style?: CSSProperties\n  icon?: FC | ReactNode\n  iconRight?: FC | ReactNode\n  outline?: boolean\n  color?: AccentColor\n  boxed?: boolean\n  ghost?: boolean\n  onClick?: MouseEventHandler\n}",
      "file": "/components/Badge/index.tsx"
    },
    "BarGraphProps": {
      "name": "BarGraphProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "value": {
          "optional": true,
          "type": "number"
        },
        "legend": {
          "optional": true,
          "type": [
            "TSTypeLiteral",
            {
              "array": "string"
            }
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type BarGraphProps = {\n  data: { value: number | { [key: string]: number }; label: string }[]\n  label?: string\n  value?: number\n  legend?: { [key: string]: string } | string[]\n  style?: CSSProperties\n}",
      "file": "/components/BarGraph/index.tsx"
    },
    "BarSegmentProps": {
      "name": "BarSegmentProps",
      "props": {
        "id": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "value": {
          "type": [
            "string",
            "number"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "legend": {
          "optional": true,
          "type": [
            {
              "array": "string"
            },
            "TSTypeLiteral"
          ]
        }
      },
      "code": "type BarSegmentProps = {\n  id: number\n  width: number\n  value: string | number\n  style?: CSSProperties\n  label?: any\n  legend?: string[] | { [key: string]: string }\n}",
      "file": "/components/BarGraph/index.tsx"
    },
    "BreadcrumbsProps": {
      "name": "BreadcrumbsProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "data": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "prefix": {
          "optional": true,
          "type": "string"
        },
        "selected": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type BreadcrumbsProps = {\n  style?: CSSProperties\n  data?: {\n    [key: string]: string\n  }\n  prefix?: string\n  selected?: string\n}",
      "file": "/components/Breadcrumbs/index.tsx"
    },
    "ButtonProps": {
      "name": "ButtonProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "AccentColor"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "light": {
          "optional": true,
          "type": "boolean"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "fill": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "loading": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "MouseEventHandler"
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "textAlign": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "right"
            },
            {
              "value": "left"
            }
          ]
        },
        "actionKeys": {
          "optional": true,
          "type": {
            "array": "Key"
          }
        }
      },
      "code": "type ButtonProps = {\n  children?: ReactNode\n  disabled?: boolean\n  color?: AccentColor\n  ghost?: boolean\n  light?: boolean\n  large?: boolean\n  fill?: boolean // TODO: add this on inputs etc as well\n  icon?: FC | ReactNode\n  iconRight?: FC | ReactNode\n  loading?: boolean\n  onClick?: MouseEventHandler\n  outline?: boolean\n  style?: CSSProperties\n  space?: Space\n  textAlign?: 'center' | 'right' | 'left'\n  actionKeys?: Key[]\n}",
      "file": "/components/Button/index.tsx"
    },
    "CalloutProps": {
      "name": "CalloutProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "closeable": {
          "optional": true,
          "type": "boolean"
        },
        "textAlign": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "right"
            }
          ]
        }
      },
      "code": "type CalloutProps = {\n  children?: ReactNode\n  icon?: FC | ReactNode\n  outline?: boolean\n  color?: Color\n  label?: string\n  description?: string\n  ghost?: boolean\n  space?: Space\n  style?: CSSProperties\n  closeable?: boolean\n  textAlign?: 'center' | 'right'\n}",
      "file": "/components/Callout/index.tsx"
    },
    "CardProps": {
      "name": "CardProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomRight": {
          "optional": true,
          "type": "ReactNode"
        },
        "bottomLeft": {
          "optional": true,
          "type": "ReactNode"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "small": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type CardProps = {\n  label?: string\n  description?: string\n  space?: Space\n  style?: CSSProperties\n  topLeft?: FC | ReactNode\n  topRight?: FC | ReactNode\n  bottomRight?: ReactNode\n  bottomLeft?: ReactNode\n  children?: ReactNode\n  small?: boolean\n}",
      "file": "/components/Card/index.tsx"
    },
    "CheckboxProps": {
      "name": "CheckboxProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "checked": {
          "optional": true,
          "type": "boolean"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type CheckboxProps = {\n  children?: ReactNode\n  checked?: boolean\n  description?: string\n  style?: CSSProperties\n  onChange?: (boolean) => void\n  label?: ReactNode\n  space?: Space\n}",
      "file": "/components/Checkbox/index.tsx"
    },
    "CodeProps": {
      "name": "CodeProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "value": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "onChange": {
          "optional": true,
          "type": [
            "TSParenthesizedType",
            "Dispatch"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        }
      },
      "code": "type CodeProps = {\n  style?: CSSProperties\n  value?: string\n  space?: Space\n  onChange?: ((value: string) => void) | Dispatch<SetStateAction<string>>\n  topRight?: FC | ReactNode\n}",
      "file": "/components/Code/index.tsx"
    },
    "ColorPickerProps": {
      "name": "ColorPickerProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ColorPickerProps = {\n  value?: string\n  style?: CSSProperties\n  onChange?: (color: string) => void\n}",
      "file": "/components/ColorPicker/index.tsx"
    },
    "ContainerProps": {
      "name": "ContainerProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ContainerProps = {\n  children: ReactNode\n  space?: Space\n  style?: CSSProperties\n  topLeft?: FC | ReactNode\n  topRight?: FC | ReactNode\n  bottomLeft?: FC | ReactNode\n  bottomRight?: FC | ReactNode\n  wrap?: boolean\n}",
      "file": "/components/Container/index.tsx"
    },
    "ContextItemProps": {
      "name": "ContextItemProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "onClick": {
          "optional": true,
          "type": "PropsEventHandler"
        },
        "icon": {
          "optional": true,
          "type": "FunctionComponent"
        },
        "iconRight": {
          "optional": true,
          "type": "FunctionComponent"
        },
        "inset": {
          "optional": true,
          "type": "boolean"
        },
        "noFocus": {
          "optional": true,
          "type": "boolean"
        },
        "tabIndex": {
          "optional": true,
          "type": "number"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        }
      },
      "code": "type ContextItemProps = {\n  style?: Style\n  color?: Color\n  onClick?: PropsEventHandler\n  icon?: FunctionComponent<Icon>\n  iconRight?: FunctionComponent<Icon>\n  inset?: boolean\n  noFocus?: boolean\n  tabIndex?: number\n  children?: ReactNode\n}",
      "file": "/components/ContextMenu/ContextItem.tsx"
    },
    "ContextOptionsFilterProps": {
      "name": "ContextOptionsFilterProps",
      "props": {
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "resize": {
          "optional": true,
          "type": "function"
        },
        "multiSelect": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ContextOptionsFilterProps = {\n  // eslint-disable-next-line\n  filterable?: boolean | 'create'\n  placeholder?: string\n  resize?: () => void\n  // eslint-disable-next-line\n  multiSelect?: boolean\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "ContextOptionsProps": {
      "name": "ContextOptionsProps",
      "props": {
        "items": {
          "type": [
            {
              "array": "Option"
            },
            "null",
            "undefined"
          ]
        },
        "value": {
          "optional": true,
          "type": "Value"
        },
        "onChange": {
          "type": "function"
        }
      },
      "code": "type ContextOptionsProps = {\n  items: Option[] | null | undefined\n  value?: Value\n  onChange: (value: Value) => void\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "ContextMultiOptionsProps": {
      "name": "ContextMultiOptionsProps",
      "props": {
        "items": {
          "type": [
            {
              "array": "Option"
            },
            "null",
            "undefined"
          ]
        },
        "values": {
          "optional": true,
          "type": {
            "array": "Value"
          }
        },
        "onChange": {
          "type": "function"
        }
      },
      "code": "type ContextMultiOptionsProps = {\n  items: Option[] | null | undefined\n  values?: Value[]\n  onChange: (values: Value[]) => void\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "FormProps": {
      "name": "FormProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "onSubmit": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type FormProps = {\n  children?: ReactNode\n  onSubmit?: (res: SubmitResponse) => void\n}",
      "file": "/components/Form/index.tsx"
    },
    "GridProps": {
      "name": "GridProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "gap": {
          "optional": true,
          "type": "number"
        },
        "itemWidth": {
          "optional": true,
          "type": "number"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type GridProps = {\n  children?: ReactNode\n  gap?: number\n  itemWidth?: number\n  space?: Space\n  style?: CSSProperties\n}",
      "file": "/components/Grid/index.tsx"
    },
    "IconProps": {
      "name": "IconProps",
      "props": {
        "color": {
          "optional": true,
          "type": "Color"
        },
        "size": {
          "optional": true,
          "type": [
            {
              "value": 10
            },
            {
              "value": 12
            },
            {
              "value": 14
            },
            {
              "value": 16
            },
            {
              "value": 20
            },
            {
              "value": 32
            }
          ]
        }
      },
      "code": "type IconProps = {\n  color?: Color\n  size?: 10 | 12 | 14 | 16 | 20 | 32\n}",
      "file": "/components/Icon/index.tsx"
    },
    "InfiniteListProps": {
      "name": "InfiniteListProps",
      "props": {
        "query": {
          "type": "InfiniteListQuery"
        },
        "delay": {
          "optional": true,
          "type": "number"
        },
        "itemSize": {
          "optional": true,
          "type": "number"
        },
        "height": {
          "optional": true,
          "type": "number"
        },
        "limit": {
          "optional": true,
          "type": "number"
        },
        "treshold": {
          "optional": true,
          "type": "number"
        },
        "target": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "itemData": {
          "optional": true,
          "type": "function"
        },
        "children": {
          "optional": true,
          "type": "FC"
        },
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        }
      },
      "code": "type InfiniteListProps = {\n  query: InfiniteListQuery\n  delay?: number\n  itemSize?: number\n  height?: number\n  limit?: number\n  treshold?: number\n  target?: string\n  style?: CSSProperties\n  itemData?: (items: object[]) => any\n  children?: FC<{ index: number; style: CSSProperties; data: any }>\n  width?: number | string\n}",
      "file": "/components/InfiniteList/index.tsx"
    },
    "InputProps": {
      "name": "InputProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "optional": {
          "optional": true,
          "type": "boolean"
        },
        "value": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "defaultValue": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "multiline": {
          "optional": true,
          "type": "boolean"
        },
        "bg": {
          "optional": true,
          "type": "boolean"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "autoFocus": {
          "optional": true,
          "type": "boolean"
        },
        "name": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "inputRef": {
          "optional": true,
          "type": "RefObject"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "suggest": {
          "optional": true,
          "type": "function"
        },
        "transform": {
          "optional": true,
          "type": "function"
        },
        "forceSuggestion": {
          "optional": true,
          "type": "boolean"
        },
        "noInterrupt": {
          "optional": true,
          "type": "boolean"
        },
        "onChange": {
          "optional": true,
          "type": [
            "TSParenthesizedType",
            "Dispatch"
          ]
        }
      },
      "code": "type InputProps = {\n  style?: CSSProperties\n  label?: string\n  description?: string\n  optional?: boolean\n  value?: string | number\n  icon?: FC | ReactNode\n  iconRight?: FC | ReactNode\n  defaultValue?: string | number\n  placeholder?: string\n  multiline?: boolean\n  bg?: boolean\n  ghost?: boolean\n  autoFocus?: boolean\n  name?: string\n  space?: Space\n  inputRef?: RefObject<HTMLDivElement>\n  large?: boolean\n  disabled?: boolean\n  suggest?: (str: string) => string // show suggestion => Enter to complete\n  transform?: (str: string) => string // transform string\n  forceSuggestion?: boolean // apply suggestion on blur\n  noInterrupt?: boolean // dont use external state while focused\n  onChange?:\n    | ((value: string | number) => void)\n    | Dispatch<SetStateAction<string | number>>\n}",
      "file": "/components/Input/index.tsx"
    },
    "LineGraphProps": {
      "name": "LineGraphProps",
      "props": {
        "data": {
          "optional": true,
          "type": {
            "array": "number"
          }
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type LineGraphProps = {\n  data?: number[]\n  style?: CSSProperties\n  label?: ReactNode\n  large?: boolean\n}",
      "file": "/components/LineGraph/index.tsx"
    },
    "LinkProps": {
      "name": "LinkProps",
      "props": {
        "href": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type LinkProps = {\n  href?: string\n  children?: ReactNode\n  style?: Style\n  onClick?: () => {}\n}",
      "file": "/components/Link/index.tsx"
    },
    "DraggableListWrapperProps": {
      "name": "DraggableListWrapperProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type DraggableListWrapperProps = {\n  children?: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/ListItems/DraggableListWrapper.tsx"
    },
    "ListProps": {
      "name": "ListProps",
      "props": {
        "data": {
          "type": "Array"
        },
        "listComponent": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type ListProps = {\n  data: Array<any>\n  listComponent?: FC<any> | ReactNode\n  style?: CSSProperties\n  space?: Space\n\n  // draggable?: boolean\n  // right?: ReactNode\n  // left?: ReactNode\n  // avatar?: Boolean\n  // thumbnail?: Boolean\n}",
      "file": "/components/ListItems/List.tsx"
    },
    "ListItemProps": {
      "name": "ListItemProps",
      "props": {
        "left": {
          "optional": true,
          "type": "ReactNode"
        },
        "avatar": {
          "optional": true,
          "type": "Boolean"
        },
        "thumbnail": {
          "optional": true,
          "type": "Boolean"
        },
        "right": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "draggable": {
          "optional": true,
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "onDrag": {
          "optional": true,
          "type": "function"
        },
        "onDragOver": {
          "optional": true,
          "type": "function"
        },
        "onDragEnd": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ListItemProps = {\n  left?: ReactNode\n  avatar?: Boolean\n  thumbnail?: Boolean\n  right?: ReactNode\n  style?: CSSProperties\n  space?: Space\n  draggable?: boolean\n  id: string\n  onDrag?: (e: any) => void\n  onDragOver?: (e: any) => void\n  onDragEnd?: (e: any) => void\n}",
      "file": "/components/ListItems/ListItem.tsx"
    },
    "StackedListItemsWrapperProps": {
      "name": "StackedListItemsWrapperProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "footer": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type StackedListItemsWrapperProps = {\n  children?: ReactNode\n  style?: CSSProperties\n  topLeft?: FC | ReactNode\n  topRight?: FC | ReactNode\n  bottomLeft?: FC | ReactNode\n  bottomRight?: FC | ReactNode\n  footer?: FC | ReactNode\n  space?: Space\n}",
      "file": "/components/ListItems/StackedListItems.tsx"
    },
    "StackedListItemProps": {
      "name": "StackedListItemProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "right": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "border": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type StackedListItemProps = {\n  children?: ReactNode\n  right?: FC | ReactNode\n  style?: CSSProperties\n  space?: Space\n  border?: boolean\n}",
      "file": "/components/ListItems/StackedListItems.tsx"
    },
    "MasonryGridProps": {
      "name": "MasonryGridProps",
      "props": {
        "children": {
          "type": [
            "ReactNode",
            "ReactChildren"
          ]
        },
        "columns": {
          "optional": true,
          "type": "number"
        },
        "gap": {
          "optional": true,
          "type": "number"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type MasonryGridProps = {\n  children: ReactNode | ReactChildren\n  columns?: number\n  gap?: number\n  style?: CSSProperties\n}",
      "file": "/components/MasonryGrid/index.tsx"
    },
    "MenuHeaderProps": {
      "name": "MenuHeaderProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type MenuHeaderProps = {\n  children?: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/Menu/index.tsx"
    },
    "MenuItemProps": {
      "name": "MenuItemProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "href": {
          "optional": true,
          "type": "string"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        },
        "isNested": {
          "optional": true,
          "type": "boolean"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        }
      },
      "code": "type MenuItemProps = {\n  children?: ReactNode\n  style?: CSSProperties\n  href?: string\n  isActive?: boolean\n  isNested?: boolean\n  weight?: Weight\n}",
      "file": "/components/Menu/index.tsx"
    },
    "PositionProps": {
      "name": "PositionProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            {
              "value": "100%"
            },
            {
              "value": "target"
            },
            {
              "value": "auto"
            }
          ]
        },
        "position": {
          "optional": true,
          "type": [
            {
              "value": "left"
            },
            {
              "value": "right"
            },
            {
              "value": "top"
            },
            {
              "value": "bottom"
            }
          ]
        },
        "placement": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "left"
            },
            {
              "value": "right"
            }
          ]
        },
        "variant": {
          "optional": true,
          "type": [
            {
              "value": "over"
            },
            {
              "value": "detached"
            }
          ]
        },
        "offset": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "selectTarget": {
          "optional": true,
          "type": "SelectTarget"
        }
      },
      "code": "type PositionProps = {\n  width?: number | '100%' | 'target' | 'auto'\n  position?: 'left' | 'right' | 'top' | 'bottom'\n  placement?: 'center' | 'left' | 'right'\n  variant?: 'over' | 'detached'\n  offset?: { x: number; y: number }\n  selectTarget?: SelectTarget\n}",
      "file": "/components/Overlay/index.tsx"
    },
    "OverlayProps": {
      "name": "OverlayProps",
      "props": {
        "Component": {
          "type": "ComponentType"
        },
        "props": {
          "type": "P"
        },
        "target": {
          "type": "Target"
        },
        "positionProps": {
          "type": "PositionProps"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type OverlayProps<P = any> = {\n  Component: ComponentType<P>\n  props: P\n  target: Target\n  positionProps: PositionProps\n  style?: CSSProperties\n}",
      "file": "/components/Overlay/index.tsx"
    },
    "PageProps": {
      "name": "PageProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type PageProps = {\n  children: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/Page/index.tsx"
    },
    "ProviderProps": {
      "name": "ProviderProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "client": {
          "optional": true,
          "type": "Based"
        },
        "theme": {
          "optional": true,
          "type": [
            {
              "value": "light"
            },
            {
              "value": "dark"
            }
          ]
        },
        "themes": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "fill": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ProviderProps = {\n  children?: ReactNode\n  style?: CSSProperties\n  client?: Based\n  theme?: 'light' | 'dark'\n  themes?: {\n    base?: object\n    dark?: object\n  }\n  fill?: boolean\n}",
      "file": "/components/Provider/index.tsx"
    },
    "RadioButtonProps": {
      "name": "RadioButtonProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "data": {
          "optional": true,
          "type": "Array"
        },
        "defaultValue": {
          "optional": true,
          "type": "string"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "direction": {
          "optional": true,
          "type": [
            {
              "value": "horizontal"
            },
            {
              "value": "vertical"
            }
          ]
        }
      },
      "code": "type RadioButtonProps = {\n  value?: string\n  data?: Array<string>\n  defaultValue?: string\n  label?: string\n  description?: string\n  direction?: 'horizontal' | 'vertical'\n  // onChange?: (value: string, payload: OnRadioGroupChange) => void\n}",
      "file": "/components/RadioButton/index.tsx"
    },
    "ResultCardProps": {
      "name": "ResultCardProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "value": {
          "optional": true,
          "type": [
            "number",
            "TSTypeLiteral"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "format": {
          "optional": true,
          "type": "NumberFormat"
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type ResultCardProps = {\n  label?: string\n  value?: number | { [key: string]: number | string }\n  style?: CSSProperties\n  format?: NumberFormat\n  space?: Space\n}",
      "file": "/components/ResultCard/index.tsx"
    },
    "RightSidebarProps": {
      "name": "RightSidebarProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type RightSidebarProps = {\n  children?: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/RightSidebar/index.tsx"
    },
    "ScatterSliderProps": {
      "name": "ScatterSliderProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "setDragging": {
          "type": "function"
        },
        "isDragging": {
          "type": "boolean"
        },
        "setIndex": {
          "type": "function"
        },
        "index": {
          "type": "number"
        },
        "width": {
          "type": "number"
        }
      },
      "code": "type ScatterSliderProps = {\n  data: {\n    time: number\n    points: { x: number; y: number; label: string; color: Color }[]\n  }[]\n  setDragging: (x: boolean) => void\n  isDragging: boolean\n  setIndex: (x: number) => void\n  index: number\n  width: number\n}",
      "file": "/components/Scatter/index.tsx"
    },
    "ScatterInnerProps": {
      "name": "ScatterInnerProps",
      "props": {
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        }
      },
      "code": "type ScatterInnerProps = {\n  width: number\n  height: number\n}",
      "file": "/components/Scatter/index.tsx"
    },
    "ScatterProps": {
      "name": "ScatterProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "xLabel": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "yLabel": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "info": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "xLabelFormat": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "yLabelFormat": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "header": {
          "optional": true,
          "type": "TSAnyKeyword"
        }
      },
      "code": "type ScatterProps = {\n  data: {\n    time: number\n    points: {\n      x: number\n      y: number\n      label: string\n      color: Color\n      info?: { [key: string]: string | number }\n    }[]\n  }[]\n  xLabel?: any\n  yLabel?: any\n  info?: {\n    [key: string]: { format: any; label: any }\n  }\n  xLabelFormat?: any\n  yLabelFormat?: any\n  header?: any\n}",
      "file": "/components/Scatter/index.tsx"
    },
    "MultiSelectProps": {
      "name": "MultiSelectProps",
      "props": {
        "color": {
          "optional": true,
          "type": "Color"
        },
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "type": "function"
        },
        "options": {
          "type": {
            "array": "TSParenthesizedType"
          }
        },
        "overlay": {
          "optional": true,
          "type": "PositionProps"
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "values": {
          "optional": true,
          "type": {
            "array": "Value"
          }
        }
      },
      "code": "type MultiSelectProps = {\n  color?: Color\n  filterable?: boolean | 'create'\n  label?: string\n  onChange: (values: Value[]) => void\n  options: (Option | Value)[]\n  overlay?: PositionProps\n  placeholder?: string\n  style?: CSSProperties\n  values?: Value[]\n}",
      "file": "/components/Select/MultiSelect.tsx"
    },
    "SelectProps": {
      "name": "SelectProps",
      "props": {
        "value": {
          "optional": true,
          "type": "Value"
        },
        "options": {
          "type": {
            "array": "TSParenthesizedType"
          }
        },
        "onChange": {
          "type": "function"
        },
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "overlay": {
          "optional": true,
          "type": "PositionProps"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type SelectProps = {\n  value?: Value\n  options: (Option | Value)[]\n  onChange: (value: Value) => void\n  filterable?: boolean | 'create'\n  placeholder?: string\n  overlay?: PositionProps\n  label?: string\n  color?: Color\n  style?: CSSProperties\n}",
      "file": "/components/Select/Select.tsx"
    },
    "SidebarItemsProps": {
      "name": "SidebarItemsProps",
      "props": {
        "href": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type SidebarItemsProps = {\n  href?: string\n  children?: ReactNode\n  isActive?: boolean\n}",
      "file": "/components/Sidebar/index.tsx"
    },
    "StepsProps": {
      "name": "StepsProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "selected": {
          "optional": true,
          "type": "string"
        },
        "prefix": {
          "optional": true,
          "type": "string"
        },
        "data": {
          "optional": true,
          "type": "TSTypeLiteral"
        }
      },
      "code": "type StepsProps = {\n  style?: CSSProperties\n  selected?: string\n  prefix?: string\n  data?: {\n    [key: string]: string\n  }\n}",
      "file": "/components/Steps/index.tsx"
    },
    "TableProps": {
      "name": "TableProps",
      "props": {
        "fields": {
          "optional": true,
          "type": "Fields"
        },
        "query": {
          "optional": true,
          "type": "function"
        },
        "data": {
          "optional": true,
          "type": {
            "array": "TSObjectKeyword"
          }
        },
        "itemSize": {
          "optional": true,
          "type": "number"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "width": {
          "optional": true,
          "type": "number"
        },
        "height": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type TableProps = {\n  fields?: Fields\n  query?: (\n    offset: number,\n    limit: number,\n    sortField: string,\n    sortOrder: string\n  ) => InfiniteListQueryResponse\n  data?: object[]\n  itemSize?: number\n  style?: CSSProperties\n  width?: number\n  height?: number\n}",
      "file": "/components/Table/index.tsx"
    },
    "TabProps": {
      "name": "TabProps",
      "props": {
        "label": {
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "icon": {
          "optional": true,
          "type": "ReactNode"
        }
      },
      "code": "type TabProps = {\n  label: string\n  children?: ReactNode\n  style?: CSSProperties\n  icon?: ReactNode\n}",
      "file": "/components/Tabs/Tab.tsx"
    },
    "TabsProps": {
      "name": "TabsProps",
      "props": {
        "children": {
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "activeTab": {
          "optional": true,
          "type": "number"
        },
        "setActiveTab": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type TabsProps = {\n  children: ReactNode | ReactNode[]\n  style?: CSSProperties\n  space?: Space\n  large?: boolean\n  activeTab?: number\n  setActiveTab?: (index: number) => void\n}",
      "file": "/components/Tabs/Tabs.tsx"
    },
    "TextProps": {
      "name": "TextProps",
      "props": {
        "size": {
          "optional": true,
          "type": "Size"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "italic": {
          "optional": true,
          "type": "boolean"
        },
        "selectable": {
          "optional": true,
          "type": "boolean"
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        },
        "variant": {
          "optional": true,
          "type": "ColorVariant"
        },
        "children": {
          "type": "ReactNode"
        }
      },
      "code": "type TextProps = {\n  size?: Size\n  space?: Space\n  color?: Color\n  weight?: Weight\n  style?: CSSProperties\n  italic?: boolean\n  selectable?: boolean\n  wrap?: boolean\n  variant?: ColorVariant\n  children: ReactNode\n}",
      "file": "/components/Text/index.tsx"
    },
    "ThumbnailProps": {
      "name": "ThumbnailProps",
      "props": {
        "size": {
          "optional": true,
          "type": [
            {
              "value": 32
            },
            {
              "value": 36
            },
            {
              "value": 40
            },
            {
              "value": 64
            }
          ]
        },
        "img": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type ThumbnailProps = {\n  size?: 32 | 36 | 40 | 64\n  img?: string\n  icon?: FC | ReactNode\n  color?: Color\n  space?: Space\n  style?: CSSProperties\n  label?: string\n}",
      "file": "/components/Thumbnail/index.tsx"
    },
    "ToastProps": {
      "name": "ToastProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topLeft": {
          "optional": true,
          "type": "ReactNode"
        },
        "topRight": {
          "optional": true,
          "type": "ReactNode"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "type": {
          "optional": true,
          "type": [
            {
              "value": "success"
            },
            {
              "value": "error"
            }
          ]
        }
      },
      "code": "type ToastProps = {\n  label?: string\n  icon?: FC | ReactNode\n  topLeft?: ReactNode\n  topRight?: ReactNode\n  description?: string\n  children?: ReactNode\n  style?: CSSProperties\n  type?: 'success' | 'error'\n}",
      "file": "/components/Toast/Toast.tsx"
    },
    "PositionStyleProps": {
      "name": "PositionStyleProps",
      "props": {
        "top": {
          "optional": true,
          "type": "number"
        },
        "bottom": {
          "optional": true,
          "type": "number"
        },
        "left": {
          "optional": true,
          "type": "number"
        },
        "right": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type PositionStyleProps = {\n  top?: number\n  bottom?: number\n  left?: number\n  right?: number\n}",
      "file": "/components/Toast/ToastProvider.tsx"
    },
    "ToggleGroupProps": {
      "name": "ToggleGroupProps",
      "props": {
        "data": {
          "optional": true,
          "type": [
            "Array",
            "Array"
          ]
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type ToggleGroupProps = {\n  data?: Array<string> | Array<ReactNode>\n  space?: Space\n  style?: CSSProperties\n}",
      "file": "/components/ToggleGroup/index.tsx"
    },
    "TogglerProps": {
      "name": "TogglerProps",
      "props": {
        "checked": {
          "optional": true,
          "type": "boolean"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "text": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type TogglerProps = {\n  checked?: boolean\n  label?: string\n  description?: string\n  text?: string\n}",
      "file": "/components/Toggler/index.tsx"
    },
    "TooltipProps": {
      "name": "TooltipProps",
      "props": {
        "children": {
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "label": {
          "type": "string"
        },
        "position": {
          "optional": true,
          "type": [
            {
              "value": "top"
            },
            {
              "value": "bottom"
            },
            {
              "value": "left"
            },
            {
              "value": "right"
            }
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onClose": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type TooltipProps = {\n  children: FC | ReactNode\n  label: string\n  position?: 'top' | 'bottom' | 'left' | 'right'\n  style?: CSSProperties\n  onClose?: () => void\n}",
      "file": "/components/Tooltip/index.tsx"
    },
    "TopbarTabProps": {
      "name": "TopbarTabProps",
      "props": {
        "href": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type TopbarTabProps = {\n  href?: string\n  children?: ReactNode\n  isActive?: boolean\n}",
      "file": "/components/Topbar/index.tsx"
    },
    "TopbarProps": {
      "name": "TopbarProps",
      "props": {
        "data": {
          "optional": true,
          "type": "TSObjectKeyword"
        },
        "selected": {
          "optional": true,
          "type": "string"
        },
        "prefix": {
          "optional": true,
          "type": "string"
        },
        "onFilter": {
          "optional": true,
          "type": "function"
        },
        "onProfile": {
          "optional": true,
          "type": "function"
        },
        "breadcrumbs": {
          "optional": true,
          "type": "ReactNode"
        },
        "logo": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        }
      },
      "code": "type TopbarProps = {\n  data?: object\n  selected?: string\n  prefix?: string\n  onFilter?: (params: any) => any\n  onProfile?: () => void\n  breadcrumbs?: ReactNode\n  logo?: FC | ReactNode\n}",
      "file": "/components/Topbar/index.tsx"
    },
    "ValueSliderProps": {
      "name": "ValueSliderProps",
      "props": {
        "items": {
          "optional": true,
          "type": "Items"
        },
        "max": {
          "optional": true,
          "type": "number"
        },
        "min": {
          "optional": true,
          "type": "number"
        },
        "alwaysShowLabel": {
          "optional": true,
          "type": "boolean"
        },
        "Label": {
          "optional": true,
          "type": "FC"
        },
        "step": {
          "optional": true,
          "type": "number"
        },
        "onStartSliding": {
          "optional": true,
          "type": "function"
        },
        "onEndSliding": {
          "optional": true,
          "type": "function"
        },
        "value": {
          "optional": true,
          "type": "number"
        },
        "onValueChange": {
          "type": "function"
        }
      },
      "code": "type ValueSliderProps = {\n  items?: Items\n  max?: number\n  min?: number\n  alwaysShowLabel?: boolean\n  Label?: FC<{\n    value?: number | Item\n    max?: number\n    min?: number\n    index?: number\n  }>\n  step?: number\n  onStartSliding?: () => void\n  onEndSliding?: () => void\n  value?: number\n  onValueChange: (value: number) => void\n}",
      "file": "/components/ValueSlider/index.tsx"
    }
  },
  "types": {
    "SizeInt": {
      "name": "SizeInt",
      "types": [
        {
          "type": {
            "value": 11
          }
        },
        {
          "type": {
            "value": 12
          }
        },
        {
          "type": {
            "value": 13
          }
        },
        {
          "type": {
            "value": 14
          }
        },
        {
          "type": {
            "value": 15
          }
        },
        {
          "type": {
            "value": 16
          }
        },
        {
          "type": {
            "value": 18
          }
        },
        {
          "type": {
            "value": 20
          }
        },
        {
          "type": {
            "value": 24
          }
        },
        {
          "type": {
            "value": 32
          }
        }
      ],
      "code": "type SizeInt = 11 | 12 | 13 | 14 | 15 | 16 | 18 | 20 | 24 | 32",
      "file": "/types/index.ts"
    },
    "Size": {
      "name": "Size",
      "types": [
        {
          "type": {}
        },
        {
          "type": "SizeInt"
        }
      ],
      "code": "type Size = `${SizeInt}px` | SizeInt",
      "file": "/types/index.ts"
    },
    "WeightInt": {
      "name": "WeightInt",
      "types": [
        {
          "type": {
            "value": 400
          }
        },
        {
          "type": {
            "value": 500
          }
        },
        {
          "type": {
            "value": 600
          }
        },
        {
          "type": {
            "value": 700
          }
        }
      ],
      "code": "type WeightInt = 400 | 500 | 600 | 700",
      "file": "/types/index.ts"
    },
    "Weight": {
      "name": "Weight",
      "types": [
        {
          "type": "WeightInt"
        },
        {
          "type": {}
        }
      ],
      "code": "type Weight = WeightInt | `${WeightInt}`",
      "file": "/types/index.ts"
    },
    "SpaceInt": {
      "name": "SpaceInt",
      "types": [
        {
          "type": {
            "value": 0
          }
        },
        {
          "type": {
            "value": 4
          }
        },
        {
          "type": {
            "value": 8
          }
        },
        {
          "type": {
            "value": 12
          }
        },
        {
          "type": {
            "value": 16
          }
        },
        {
          "type": {
            "value": 20
          }
        },
        {
          "type": {
            "value": 24
          }
        },
        {
          "type": {
            "value": 28
          }
        },
        {
          "type": {
            "value": 32
          }
        }
      ],
      "code": "type SpaceInt = 0 | 4 | 8 | 12 | 16 | 20 | 24 | 28 | 32",
      "file": "/types/index.ts"
    },
    "Space": {
      "name": "Space",
      "types": [
        {
          "type": "SpaceInt"
        },
        {
          "type": {}
        },
        {
          "type": {
            "value": true
          }
        }
      ],
      "code": "type Space = SpaceInt | `${SpaceInt}px` | true",
      "file": "/types/index.ts"
    },
    "Icon": {
      "name": "Icon",
      "types": [
        {
          "type": "SVGProps"
        },
        {
          "type": "IconProps"
        }
      ],
      "code": "type Icon = SVGProps<SVGSVGElement> & IconProps",
      "file": "/types/index.ts"
    },
    "Key": {
      "name": "Key",
      "types": [
        {
          "type": {
            "value": "Enter"
          }
        },
        {
          "type": {
            "value": "Esc"
          }
        },
        {
          "type": {
            "value": "ArrowUp"
          }
        },
        {
          "type": {
            "value": "ArrowDown"
          }
        },
        {
          "type": {
            "value": "ArrowLeft"
          }
        },
        {
          "type": {
            "value": "ArrowRight"
          }
        },
        {
          "type": {
            "value": "Tab"
          }
        }
      ],
      "code": "type Key =\n  | 'Enter'\n  | 'Esc'\n  | 'ArrowUp'\n  | 'ArrowDown'\n  | 'ArrowLeft'\n  | 'ArrowRight'\n  | 'Tab'",
      "file": "/types/index.ts"
    }
  }
}
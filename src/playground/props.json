{
  "props": {
    "AccordionItemProps": {
      "name": "AccordionItemProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "checked": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "expanded": {
          "optional": true,
          "type": "boolean"
        },
        "onExpand": {
          "optional": true,
          "type": "function"
        },
        "topRight": {
          "optional": true,
          "type": "ReactNode"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type AccordionItemProps = {\n  label?: string\n  children?: ReactNode\n  space?: Space\n  checked?: boolean\n  style?: Style\n  expanded?: boolean\n  onExpand?: (expanded: boolean) => void\n  topRight?: ReactNode\n  color?: Color\n}",
      "file": "/components/Accordion/index.tsx"
    },
    "AccordionProps": {
      "name": "AccordionProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type AccordionProps = {\n  children?: ReactNode\n  space?: Space\n  style?: Style\n  color?: Color\n}",
      "file": "/components/Accordion/index.tsx"
    },
    "ArrayListProps": {
      "name": "ArrayListProps",
      "props": {
        "description": {
          "optional": true,
          "type": "string"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "value": {
          "optional": true,
          "type": {
            "array": "TSAnyKeyword"
          }
        },
        "schema": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "label": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type ArrayListProps = {\n  description?: string\n  indent?: boolean\n  disabled?: boolean\n  style?: CSSProperties\n  space?: Space\n  onChange?(ids: string[] | number[]): void\n  value?: any[]\n  schema?: any\n  label?: string\n}",
      "file": "/components/ArrayList/index.tsx"
    },
    "AuthProps": {
      "name": "AuthProps",
      "props": {
        "onLogin": {
          "optional": true,
          "type": "function"
        },
        "onRegister": {
          "optional": true,
          "type": "function"
        },
        "register": {
          "optional": true,
          "type": "boolean"
        },
        "onResetRequest": {
          "optional": true,
          "type": "function"
        },
        "logo": {
          "optional": true,
          "type": [
            "boolean",
            "ReactNode"
          ]
        },
        "overlay": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "app": {
          "optional": true,
          "type": "FC"
        },
        "googleClientId": {
          "optional": true,
          "type": "string"
        },
        "microsoftClientId": {
          "optional": true,
          "type": "string"
        },
        "githubClientId": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        }
      },
      "code": "type AuthProps = {\n  onLogin?: (props: { token: string; refreshToken: string }) => void\n  onRegister?: (data: { email: string; password: string; name: string }) => void\n  register?: boolean\n  onResetRequest?: () => void\n  logo?: boolean | ReactNode\n  overlay?: boolean\n  style?: CSSProperties\n  app?: FC<any | { user: { id: string; email: string } }>\n  googleClientId?: string\n  microsoftClientId?: string\n  githubClientId?: string\n  children?: ReactNode\n}",
      "file": "/components/Auth/Auth.tsx"
    },
    "AuthProviderProps": {
      "name": "AuthProviderProps",
      "props": {
        "children": {
          "type": "ReactNode"
        }
      },
      "code": "type AuthProviderProps = {\n  children: ReactNode\n}",
      "file": "/components/Auth/AuthProvider.tsx"
    },
    "GithubButtonProps": {
      "name": "GithubButtonProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "clientId": {
          "type": "string"
        }
      },
      "code": "type GithubButtonProps = {\n  width?: number | string\n  label?: string\n  clientId: string\n}",
      "file": "/components/Auth/GithubButton.tsx"
    },
    "GoogleButtonProps": {
      "name": "GoogleButtonProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "clientId": {
          "type": "string"
        }
      },
      "code": "type GoogleButtonProps = {\n  width?: number | string\n  label?: string\n  clientId: string\n}",
      "file": "/components/Auth/GoogleButton.tsx"
    },
    "LoginProps": {
      "name": "LoginProps",
      "props": {
        "width": {
          "optional": true,
          "type": "number"
        },
        "onLogin": {
          "optional": true,
          "type": "function"
        },
        "onRegisterRequest": {
          "optional": true,
          "type": "function"
        },
        "onResetRequest": {
          "optional": true,
          "type": "function"
        },
        "googleClientId": {
          "optional": true,
          "type": "string"
        },
        "microsoftClientId": {
          "optional": true,
          "type": "string"
        },
        "githubClientId": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type LoginProps = {\n  width?: number\n  onLogin?: (props: { token: string; refreshToken: string }) => void\n  onRegisterRequest?: (email: string) => void\n  onResetRequest?: () => void\n  googleClientId?: string\n  microsoftClientId?: string\n  githubClientId?: string\n}",
      "file": "/components/Auth/Login.tsx"
    },
    "MicrosoftButtonProps": {
      "name": "MicrosoftButtonProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "clientId": {
          "type": "string"
        }
      },
      "code": "type MicrosoftButtonProps = {\n  width?: number | string\n  label?: string\n  clientId: string\n}",
      "file": "/components/Auth/MicrosoftButton.tsx"
    },
    "RegisterProps": {
      "name": "RegisterProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "email": {
          "optional": true,
          "type": "string"
        },
        "onRegister": {
          "optional": true,
          "type": "function"
        },
        "googleClientId": {
          "optional": true,
          "type": "string"
        },
        "microsoftClientId": {
          "optional": true,
          "type": "string"
        },
        "githubClientId": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type RegisterProps = {\n  width?: number | string\n  email?: string\n  onRegister?: (data: { email: string; password: string; name: string }) => void\n  googleClientId?: string\n  microsoftClientId?: string\n  githubClientId?: string\n}",
      "file": "/components/Auth/Register.tsx"
    },
    "ResetRequestProps": {
      "name": "ResetRequestProps",
      "props": {
        "onSuccess": {
          "optional": true,
          "type": "function"
        },
        "onCancel": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type ResetRequestProps = {\n  onSuccess?: () => void\n  onCancel?: () => void\n  style?: CSSProperties\n}",
      "file": "/components/Auth/ResetRequest.tsx"
    },
    "AvatarProps": {
      "name": "AvatarProps",
      "props": {
        "size": {
          "optional": true,
          "type": "Size"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "img": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "Style"
        }
      },
      "code": "type AvatarProps = {\n  size?: Size\n  color?: Color\n  img?: string\n  icon?: FunctionComponent<Icon> | ReactNode\n  space?: Space\n  label?: string\n  onClick?: (e: SyntheticEvent) => void\n  style?: Style\n}",
      "file": "/components/Avatar/index.tsx"
    },
    "BadgeProps": {
      "name": "BadgeProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "boxed": {
          "optional": true,
          "type": "boolean"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": [
            "TSParenthesizedType",
            "boolean"
          ]
        }
      },
      "code": "type BadgeProps = {\n  children: ReactNode\n  style?: CSSProperties\n  icon?: FunctionComponent<Icon> | ReactNode\n  iconRight?: FunctionComponent<Icon> | ReactNode\n  outline?: boolean\n  color?: Color\n  boxed?: boolean\n  ghost?: boolean\n  onClick?: (() => void) | boolean\n}",
      "file": "/components/Badge/index.tsx"
    },
    "BarGraphProps": {
      "name": "BarGraphProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "value": {
          "optional": true,
          "type": "number"
        },
        "legend": {
          "optional": true,
          "type": [
            "TSTypeLiteral",
            {
              "array": "string"
            }
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "scale": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type BarGraphProps = {\n  data: {\n    value: number | { [key: string]: number }\n    label: string\n    color?: string\n  }[]\n  label?: string\n  description?: string\n  value?: number\n  legend?: { [key: string]: string } | string[]\n  style?: CSSProperties\n  color?: Color\n  scale?: number\n}",
      "file": "/components/BarGraph/index.tsx"
    },
    "BarSegmentProps": {
      "name": "BarSegmentProps",
      "props": {
        "id": {
          "type": [
            "number",
            "string"
          ]
        },
        "width": {
          "type": "number"
        },
        "value": {
          "type": [
            "string",
            "number"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "bgColor": {
          "optional": true,
          "type": "string"
        },
        "legend": {
          "optional": true,
          "type": "ReactNode"
        }
      },
      "code": "type BarSegmentProps = {\n  id: number | string\n  width: number\n  value: string | number\n  style?: CSSProperties\n  label?: string\n  bgColor?: string\n  legend?: ReactNode\n}",
      "file": "/components/BarGraph/index.tsx"
    },
    "BreadcrumbsProps": {
      "name": "BreadcrumbsProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "data": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "active": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type BreadcrumbsProps = {\n  style?: Style\n  data?: {\n    [key: string]: ReactNode | ((e: MouseEvent<HTMLDivElement>) => void)\n  }\n  active?: string\n  onChange?: (key: string) => void\n}",
      "file": "/components/Breadcrumbs/index.tsx"
    },
    "ButtonProps": {
      "name": "ButtonProps",
      "props": {
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "light": {
          "optional": true,
          "type": "boolean"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "transparent": {
          "optional": true,
          "type": "boolean"
        },
        "fill": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "loading": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": [
            "MouseEventHandler",
            "TSParenthesizedType",
            "TSParenthesizedType",
            "TSParenthesizedType"
          ]
        },
        "onPointerDown": {
          "optional": true,
          "type": "MouseEventHandler"
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "textAlign": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "right"
            },
            {
              "value": "left"
            }
          ]
        },
        "keyboardShortcut": {
          "optional": true,
          "type": "Key"
        },
        "displayShortcut": {
          "optional": true,
          "type": "boolean"
        },
        "clickAnimation": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ButtonProps = {\n  children?: ReactNode | ReactNode[]\n  disabled?: boolean\n  color?: Color\n  ghost?: boolean\n  light?: boolean\n  large?: boolean\n  transparent?: boolean\n  fill?: boolean // TODO: add this on inputs etc as well\n  icon?: FunctionComponent<Icon> | ReactNode\n  iconRight?: FunctionComponent<Icon> | ReactNode\n  loading?: boolean\n  onClick?:\n    | MouseEventHandler\n    | (() => void)\n    | ((e: MouseEvent) => Promise<void>)\n    | (() => Promise<void>)\n  onPointerDown?: MouseEventHandler\n  outline?: boolean\n  style?: Style\n  space?: Space\n  textAlign?: 'center' | 'right' | 'left'\n  /** \n   Use a keyboard shortcut for this button, use displayShortcut to automaticly show the shortcut if applicable.\n  \n   Keys: `Enter, Esc, ArrowUp, ArrowDown, ArrowLeft, ArrowRight, Tab`\n   Commands: `Cmd+C, Alt+C, Shift+C, Cmd+Shift+A`\n  */\n  keyboardShortcut?: Key\n  /** Parses action keys string and displays it if not on a touchdevice\n   */\n  displayShortcut?: boolean\n  /** Animate onClick\n   */\n  clickAnimation?: boolean\n}",
      "file": "/components/Button/index.tsx"
    },
    "CalloutProps": {
      "name": "CalloutProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "labelColor": {
          "optional": true,
          "type": "Color"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "closeable": {
          "optional": true,
          "type": "boolean"
        },
        "textAlign": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "right"
            },
            {
              "value": "left"
            }
          ]
        }
      },
      "code": "type CalloutProps = {\n  children?: ReactNode\n  icon?: FunctionComponent<Icon> | ReactNode\n  outline?: boolean\n  color?: Color\n  label?: string\n  labelColor?: Color\n  description?: string\n  ghost?: boolean\n  space?: Space\n  style?: Style\n  closeable?: boolean\n  textAlign?: 'center' | 'right' | 'left'\n}",
      "file": "/components/Callout/index.tsx"
    },
    "CardProps": {
      "name": "CardProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomRight": {
          "optional": true,
          "type": "ReactNode"
        },
        "bottomLeft": {
          "optional": true,
          "type": "ReactNode"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "small": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type CardProps = {\n  label?: string\n  description?: string\n  space?: Space\n  style?: Style\n  topLeft?: FC | ReactNode\n  topRight?: FC | ReactNode\n  bottomRight?: ReactNode\n  bottomLeft?: ReactNode\n  children?: ReactNode\n  small?: boolean\n  onClick?: () => void\n}",
      "file": "/components/Card/index.tsx"
    },
    "CheckboxProps": {
      "name": "CheckboxProps",
      "props": {
        "checked": {
          "optional": true,
          "type": "boolean"
        },
        "indeterminate": {
          "optional": true,
          "type": "boolean"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        },
        "small": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type CheckboxProps = {\n  checked?: boolean\n  indeterminate?: boolean\n  description?: string\n  style?: Style\n  onChange?: (value: boolean) => void\n  label?: string\n  space?: Space\n  wrap?: boolean\n  small?: boolean\n  color?: Color\n  onClick?: (e: any) => void\n}",
      "file": "/components/Checkbox/index.tsx"
    },
    "CodeProps": {
      "name": "CodeProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "value": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "onChange": {
          "optional": true,
          "type": [
            "TSParenthesizedType",
            "Dispatch"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        }
      },
      "code": "type CodeProps = {\n  style?: Style\n  value?: string\n  space?: Space\n  onChange?: ((value: string) => void) | Dispatch<SetStateAction<string>>\n  topRight?: FC | ReactNode\n}",
      "file": "/components/Code/index.tsx"
    },
    "ColorPickerProps": {
      "name": "ColorPickerProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ColorPickerProps = {\n  value?: string\n  style?: Style\n  onChange?: (color: string) => void\n}",
      "file": "/components/ColorPicker/index.tsx"
    },
    "ContainerProps": {
      "name": "ContainerProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "bottomRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ContainerProps = {\n  children: ReactNode\n  space?: Space\n  style?: Style\n  topLeft?: FC | ReactNode\n  topRight?: FC | ReactNode\n  bottomLeft?: FC | ReactNode\n  bottomRight?: FC | ReactNode\n  wrap?: boolean\n}",
      "file": "/components/Container/index.tsx"
    },
    "ContextItemProps": {
      "name": "ContextItemProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "onClick": {
          "optional": true,
          "type": "PropsEventHandler"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "iconRight": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "inset": {
          "optional": true,
          "type": "boolean"
        },
        "noFocus": {
          "optional": true,
          "type": "boolean"
        },
        "tabIndex": {
          "optional": true,
          "type": "number"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        }
      },
      "code": "type ContextItemProps = {\n  style?: Style\n  color?: Color\n  onClick?: PropsEventHandler\n  icon?: FunctionComponent<Icon> | ReactNode\n  iconRight?: FunctionComponent<Icon> | ReactNode\n  inset?: boolean\n  noFocus?: boolean\n  tabIndex?: number\n  children?: ReactNode\n}",
      "file": "/components/ContextMenu/ContextItem.tsx"
    },
    "ContextOptionsFilterProps": {
      "name": "ContextOptionsFilterProps",
      "props": {
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "resize": {
          "optional": true,
          "type": "function"
        },
        "multiSelect": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ContextOptionsFilterProps = {\n  // eslint-disable-next-line\n  filterable?: boolean | 'create'\n  placeholder?: string\n  resize?: () => void\n  // eslint-disable-next-line\n  multiSelect?: boolean\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "ContextOptionsProps": {
      "name": "ContextOptionsProps",
      "props": {
        "items": {
          "type": [
            {
              "array": "Option"
            },
            "null",
            "undefined"
          ]
        },
        "value": {
          "optional": true,
          "type": "Value"
        },
        "onChange": {
          "type": "function"
        }
      },
      "code": "type ContextOptionsProps = {\n  items: Option[] | null | undefined\n  value?: Value\n  onChange: (value: Value) => void\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "ContextMultiOptionsProps": {
      "name": "ContextMultiOptionsProps",
      "props": {
        "items": {
          "type": [
            {
              "array": "Option"
            },
            "null",
            "undefined"
          ]
        },
        "values": {
          "optional": true,
          "type": {
            "array": "Value"
          }
        },
        "onChange": {
          "type": "function"
        }
      },
      "code": "type ContextMultiOptionsProps = {\n  items: Option[] | null | undefined\n  values?: Value[]\n  onChange: (values: Value[]) => void\n}",
      "file": "/components/ContextMenu/ContextOptions.tsx"
    },
    "DateInputProps": {
      "name": "DateInputProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "dateHandler": {
          "optional": true,
          "type": "function"
        },
        "setFocused": {
          "optional": true,
          "type": "function"
        },
        "clearHandler": {
          "optional": true,
          "type": "function"
        },
        "fromValue": {
          "optional": true,
          "type": "string"
        },
        "tillValue": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "focusOnBeginDate": {
          "optional": true,
          "type": "boolean"
        },
        "focusOnEndDate": {
          "optional": true,
          "type": "boolean"
        },
        "isEndDate": {
          "optional": true,
          "type": "boolean"
        },
        "isDateRange": {
          "optional": true,
          "type": "boolean"
        },
        "setFromValue": {
          "optional": true,
          "type": "function"
        },
        "setTillValue": {
          "optional": true,
          "type": "function"
        },
        "setFocusOnBeginDate": {
          "optional": true,
          "type": "function"
        },
        "setFocusOnEndDate": {
          "optional": true,
          "type": "function"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type DateInputProps = {\n  value?: string\n  dateHandler?: (value: string) => void\n  setFocused?: (value: boolean) => void\n  clearHandler?: () => void\n  fromValue?: string\n  tillValue?: string\n  style?: CSSProperties\n  placeholder?: string\n  focusOnBeginDate?: boolean\n  focusOnEndDate?: boolean\n  isEndDate?: boolean\n  isDateRange?: boolean\n  setFromValue?: (value: string) => void\n  setTillValue?: (value: string) => void\n  setFocusOnBeginDate?: (value: boolean) => void\n  setFocusOnEndDate?: (value: boolean) => void\n  onClick?: () => void\n}",
      "file": "/components/DateTimePicker/DateInput.tsx"
    },
    "DatePickerProps": {
      "name": "DatePickerProps",
      "props": {
        "inputValue": {
          "optional": true,
          "type": "string"
        },
        "setInputValue": {
          "optional": true,
          "type": "function"
        },
        "setShowDatePicker": {
          "optional": true,
          "type": "function"
        },
        "setFocused": {
          "optional": true,
          "type": "function"
        },
        "clearHandler": {
          "optional": true,
          "type": "function"
        },
        "fromValue": {
          "optional": true,
          "type": "string"
        },
        "tillValue": {
          "optional": true,
          "type": "string"
        },
        "isDateRange": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "setFocusOnBeginDate": {
          "optional": true,
          "type": "function"
        },
        "setFocusOnEndDate": {
          "optional": true,
          "type": "function"
        },
        "setFromValue": {
          "optional": true,
          "type": "function"
        },
        "setTillValue": {
          "optional": true,
          "type": "function"
        },
        "focusOnBeginDate": {
          "optional": true,
          "type": "boolean"
        },
        "focusOnEndDate": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type DatePickerProps = {\n  inputValue?: string\n  setInputValue?: (value: string) => void\n  setShowDatePicker?: (value: boolean) => void\n  setFocused?: (value: boolean) => void\n  clearHandler?: () => void\n  fromValue?: string\n  tillValue?: string\n  isDateRange?: boolean\n  style?: CSSProperties\n  setFocusOnBeginDate?: (value: boolean) => void\n  setFocusOnEndDate?: (value: boolean) => void\n  setFromValue?: (value: string) => void\n  setTillValue?: (value: string) => void\n  focusOnBeginDate?: boolean\n  focusOnEndDate?: boolean\n}",
      "file": "/components/DateTimePicker/DatePicker.tsx"
    },
    "DateRangeInputProps": {
      "name": "DateRangeInputProps",
      "props": {
        "setFromValue": {
          "optional": true,
          "type": "function"
        },
        "setTillValue": {
          "optional": true,
          "type": "function"
        },
        "fromValue": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "tillValue": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        }
      },
      "code": "type DateRangeInputProps = {\n  // value?: string\n  // dateHandler?: (value: string) => void\n  // setFocused?: (value: boolean) => void\n  // setErrorMessage?: (value: string) => void\n  setFromValue?: (value: string) => void\n  setTillValue?: (value: string) => void\n  fromValue?: string | number\n  tillValue?: string | number\n}",
      "file": "/components/DateTimePicker/DateRangeInput.tsx"
    },
    "DateTimePickerProps": {
      "name": "DateTimePickerProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "value": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "startValue": {
          "optional": true,
          "type": "string"
        },
        "endValue": {
          "optional": true,
          "type": "string"
        },
        "time": {
          "optional": true,
          "type": "boolean"
        },
        "utc": {
          "optional": true,
          "type": "boolean"
        },
        "dateRange": {
          "optional": true,
          "type": "boolean"
        },
        "onClose": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type DateTimePickerProps = {\n  label?: string\n  description?: string\n  descriptionBottom?: string\n  indent?: boolean\n  onChange?: (value: number) => void\n  space?: Space\n  style?: CSSProperties\n  // TODO make it work -> error?: (value: boolean | string | number) => string\n  disabled?: boolean\n  value?: string | number\n  startValue?: string\n  endValue?: string\n  time?: boolean\n  utc?: boolean\n  dateRange?: boolean\n  onClose?: () => void\n}",
      "file": "/components/DateTimePicker/index.tsx"
    },
    "DrawerProps": {
      "name": "DrawerProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "isRendered": {
          "optional": true,
          "type": "boolean"
        },
        "sidebar": {
          "optional": true,
          "type": "boolean"
        },
        "sidebarElem": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "noBoxShadow": {
          "optional": true,
          "type": "boolean"
        },
        "width": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "height": {
          "optional": true,
          "type": [
            "string",
            "number"
          ]
        },
        "closeFunc": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "fullscreen": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type DrawerProps = {\n  label?: string\n  children?: ReactNode | ReactNode[]\n  isRendered?: boolean\n  sidebar?: boolean\n  sidebarElem?: ReactNode | ReactNode[]\n  noBoxShadow?: boolean\n  width?: string | number\n  height?: string | number\n  closeFunc?: any\n  style?: CSSProperties\n  fullscreen?: boolean\n}",
      "file": "/components/Drawer/index.tsx"
    },
    "ExpandableListProps": {
      "name": "ExpandableListProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "data": {
          "optional": true,
          "type": {
            "array": "ListItem"
          }
        },
        "maxHeight": {
          "optional": true,
          "type": "number"
        },
        "topRight": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "topLeft": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        }
      },
      "code": "type ExpandableListProps = {\n  style?: Style\n  data?: ListItem[]\n  maxHeight?: number\n  topRight?: FC | ReactNode\n  topLeft?: FC | ReactNode\n}",
      "file": "/components/ExpandableList/index.tsx"
    },
    "ExpandableListItemProps": {
      "name": "ExpandableListItemProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "index": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "item": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "total": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type ExpandableListItemProps = {\n  style?: Style\n  index?: number | string\n  item?: any\n  total?: number\n}",
      "file": "/components/ExpandableList/index.tsx"
    },
    "FileUploadProps": {
      "name": "FileUploadProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "acceptedFileTypes": {
          "optional": true,
          "type": {
            "array": "string"
          }
        },
        "multiple": {
          "optional": true,
          "type": "boolean"
        },
        "value": {
          "optional": true,
          "type": "TSTupleType"
        }
      },
      "code": "type FileUploadProps = {\n  label?: string\n  description?: string\n  descriptionBottom?: string\n  indent?: boolean\n  onChange?: (file: File[]) => void\n  style?: Style\n  space?: Space\n  disabled?: boolean\n  acceptedFileTypes?: string[]\n  multiple?: boolean\n  value?: [{ name?: string; type?: MimeType; src: string }]\n}",
      "file": "/components/FileUpload/index.tsx"
    },
    "FooterProps": {
      "name": "FooterProps",
      "props": {
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "floating": {
          "optional": true,
          "type": "boolean"
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "data": {
          "optional": true,
          "type": "Data"
        },
        "paddingRight": {
          "optional": true,
          "type": "number"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "width": {
          "optional": true,
          "type": "number"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "paddingLeft": {
          "optional": true,
          "type": "number"
        },
        "items": {
          "optional": true,
          "type": {
            "array": "Object"
          }
        },
        "onClick": {
          "type": [
            "MultiDataEventHandler",
            "DataEventHandler"
          ]
        }
      },
      "code": "type FooterProps<T = any> = {\n  label?: ReactNode\n  floating?: boolean\n  outline?: boolean\n  data?: Data<T>\n  paddingRight?: number\n  style?: CSSProperties\n  width?: number\n  icon?: FunctionComponent<Icon> | ReactNode\n  paddingLeft?: number\n  items?: Object[]\n  onClick: MultiDataEventHandler<Object> | DataEventHandler<Data<T>>\n}",
      "file": "/components/Flow/Footer.tsx"
    },
    "FooterBottomProps": {
      "name": "FooterBottomProps",
      "props": {
        "context": {
          "type": "TSAnyKeyword"
        },
        "seqItems": {
          "type": "TSAnyKeyword"
        },
        "isDragOver": {
          "type": "TSAnyKeyword"
        },
        "isDragOverSeq": {
          "type": "TSAnyKeyword"
        },
        "isDropLoading": {
          "type": "TSAnyKeyword"
        },
        "index": {
          "type": "TSAnyKeyword"
        },
        "wrappedData": {
          "type": "TSAnyKeyword"
        }
      },
      "code": "type FooterBottomProps = {\n  context: any\n  seqItems: any\n  isDragOver: any\n  isDragOverSeq: any\n  isDropLoading: any\n  index: any\n  wrappedData: any\n}",
      "file": "/components/Flow/FooterBottom.tsx"
    },
    "HeaderProps": {
      "name": "HeaderProps",
      "props": {
        "data": {
          "optional": true,
          "type": "Data"
        },
        "autoFocusTitle": {
          "optional": true,
          "type": "boolean"
        },
        "indicator": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onEditTitle": {
          "optional": true,
          "type": "function"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "noBorderBottom": {
          "optional": true,
          "type": "boolean"
        },
        "isHover": {
          "optional": true,
          "type": "boolean"
        },
        "children": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "paddingRight": {
          "optional": true,
          "type": "number"
        },
        "width": {
          "optional": true,
          "type": [
            "number",
            "string"
          ]
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "paddingLeft": {
          "optional": true,
          "type": "number"
        },
        "items": {
          "optional": true,
          "type": {
            "array": "Object"
          }
        },
        "isExpanded": {
          "optional": true,
          "type": "boolean"
        },
        "onExpand": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type HeaderProps = {\n  data?: Data<any>\n  autoFocusTitle?: boolean\n  indicator?: string\n  style?: CSSProperties\n  onEditTitle?: (value: string, data?: Data<any>) => void\n  label?: string\n  noBorderBottom?: boolean\n  isHover?: boolean\n  children?: FC<{ items?: Object[]; data?: Data<any> }> | ReactNode\n  outline?: boolean\n  paddingRight?: number\n  width?: number | string\n  icon?: FunctionComponent<Icon> | ReactNode\n  paddingLeft?: number\n  items?: Object[]\n  isExpanded?: boolean\n  onExpand?: () => void\n}",
      "file": "/components/Flow/Header.tsx"
    },
    "FlowProps": {
      "name": "FlowProps",
      "props": {
        "indicator": {
          "optional": true,
          "type": "boolean"
        },
        "onDropData": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "onDropFile": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "onDrop": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "onDropSequence": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "paddingRight": {
          "optional": true,
          "type": "number"
        },
        "paddingLeft": {
          "optional": true,
          "type": "number"
        },
        "sequenceSpacing": {
          "optional": true,
          "type": "number"
        },
        "paddingTop": {
          "optional": true,
          "type": "number"
        },
        "expandable": {
          "optional": true,
          "type": "boolean"
        },
        "defaultIsExpanded": {
          "optional": true,
          "type": "boolean"
        },
        "paddingBottom": {
          "optional": true,
          "type": "number"
        },
        "width": {
          "optional": true,
          "type": "number"
        },
        "items": {
          "type": {
            "array": "Object"
          }
        },
        "draggable": {
          "optional": true,
          "type": "boolean"
        },
        "Actions": {
          "optional": true,
          "type": "ComponentType"
        },
        "itemProps": {
          "optional": true,
          "type": "SequenceitemProps"
        },
        "onClick": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "actionIcon": {
          "optional": true,
          "type": "string"
        },
        "onAction": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "footer": {
          "optional": true,
          "type": "FooterProps"
        },
        "stepFooter": {
          "optional": true,
          "type": "FooterProps"
        },
        "exportData": {
          "optional": true,
          "type": "ExportData"
        },
        "exportDataSequence": {
          "optional": true,
          "type": "ExportData"
        },
        "onOptions": {
          "optional": true,
          "type": "DataEventHandler"
        },
        "optionsIcon": {
          "optional": true,
          "type": "string"
        },
        "contextualMenu": {
          "optional": true,
          "type": "boolean"
        },
        "children": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "header": {
          "optional": true,
          "type": "HeaderProps"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type FlowProps = {\n  indicator?: boolean\n  onDropData?: DataEventHandler\n  onDropFile?: DataEventHandler\n  onDrop?: DataEventHandler<\n    | { data: Data[]; targetIndex: number; targetData: Data }\n    | { files: File[]; targetIndex: number; targetData: Data }\n  > // i think this is an order change - if this is not there dont allow order change\n  onDropSequence?: DataEventHandler<\n    | { data: Data[]; targetIndex: number }\n    | { files: File[]; targetIndex: number }\n  > // i think this is an order change - if this is not there dont allow order change\n  paddingRight?: number\n  paddingLeft?: number\n  sequenceSpacing?: number\n  paddingTop?: number\n  expandable?: boolean\n  defaultIsExpanded?: boolean\n  paddingBottom?: number\n  width?: number\n  items: Object[]\n  draggable?: boolean\n  Actions?: ComponentType<OptionsComponentProps>\n  itemProps?: SequenceitemProps\n  onClick?: DataEventHandler\n  actionIcon?: string\n  onAction?: DataEventHandler\n  footer?: FooterProps\n  stepFooter?: FooterProps\n  exportData?: ExportData\n  exportDataSequence?: ExportData\n  onOptions?: DataEventHandler // select options\n  optionsIcon?: string\n  contextualMenu?: boolean\n  children?: FC<OptionsComponentProps> | ReactNode\n  header?: HeaderProps\n  color?: Color\n}",
      "file": "/components/Flow/index.tsx"
    },
    "FormProps": {
      "name": "FormProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onSubmit": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type FormProps = {\n  style?: CSSProperties\n  onSubmit?: (res: SubmitResponse) => void\n}",
      "file": "/components/Form/index.tsx"
    },
    "GeoInputProps": {
      "name": "GeoInputProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "mapboxApiAccessToken": {
          "optional": true,
          "type": "string"
        },
        "mapboxStyle": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "value": {
          "optional": true,
          "type": "TSTypeLiteral"
        }
      },
      "code": "type GeoInputProps = {\n  label?: string\n  description?: string\n  descriptionBottom?: string\n  onChange?: (value: { latitude: number; longitude: number }) => void\n  indent?: boolean\n  disabled?: boolean\n  space?: Space\n  mapboxApiAccessToken?: string\n  mapboxStyle?: string\n  style?: CSSProperties\n  value?: {\n    lat: number\n    lng: number\n  }\n}",
      "file": "/components/GeoInput/index.tsx"
    },
    "GridProps": {
      "name": "GridProps",
      "props": {
        "children": {
          "optional": true,
          "type": {
            "array": "ReactNode"
          }
        },
        "gap": {
          "optional": true,
          "type": "number"
        },
        "itemWidth": {
          "optional": true,
          "type": "number"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        }
      },
      "code": "type GridProps = {\n  children?: ReactNode[]\n  gap?: number\n  itemWidth?: number\n  space?: Space\n  style?: Style\n}",
      "file": "/components/Grid/index.tsx"
    },
    "IconProps": {
      "name": "IconProps",
      "props": {
        "color": {
          "optional": true,
          "type": "Color"
        },
        "size": {
          "optional": true,
          "type": "Size"
        }
      },
      "code": "type IconProps = {\n  color?: Color\n  size?: Size\n}",
      "file": "/components/Icon/index.tsx"
    },
    "ColorInputProps": {
      "name": "ColorInputProps",
      "props": {
        "inputRef": {
          "optional": true,
          "type": "RefObject"
        },
        "value": {
          "optional": true,
          "type": "string"
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "defaultValue": {
          "optional": true,
          "type": "string"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ColorInputProps = {\n  inputRef?: RefObject<HTMLInputElement>\n  value?: string\n  placeholder?: string\n  defaultValue?: string\n  disabled?: boolean\n  style?: CSSProperties\n  onChange?: (target) => void\n}",
      "file": "/components/Input/ColorInput.tsx"
    },
    "DigestInputProps": {
      "name": "DigestInputProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type DigestInputProps = {\n  value?: string\n  onChange?: (target) => void\n  disabled?: boolean\n}",
      "file": "/components/Input/DigestInput.tsx"
    },
    "EditableTitleProps": {
      "name": "EditableTitleProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "identifier": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "onBlur": {
          "optional": true,
          "type": "function"
        },
        "placeholderAsDefault": {
          "optional": true,
          "type": "boolean"
        },
        "autoFocus": {
          "optional": true,
          "type": "boolean"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        },
        "horizontalPaddding": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type EditableTitleProps = {\n  value?: string\n  placeholder?: string\n  identifier?: any\n  onChange?: (value: string) => void\n  onBlur?: (event: React.FormEvent<HTMLDivElement>) => void\n  placeholderAsDefault?: boolean\n  autoFocus?: boolean\n  weight?: Weight\n  horizontalPaddding?: number\n}",
      "file": "/components/Input/EditableTitle.tsx"
    },
    "InputWrapperProps": {
      "name": "InputWrapperProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "errorMessage": {
          "optional": true,
          "type": "string"
        },
        "focus": {
          "optional": true,
          "type": "boolean"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "onMouseEnter": {
          "optional": true,
          "type": "function"
        },
        "onMouseLeave": {
          "optional": true,
          "type": "function"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "onBlur": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type InputWrapperProps = {\n  children: ReactNode\n  errorMessage?: string\n  focus?: boolean\n  indent?: boolean\n  space?: Space\n  descriptionBottom?: string\n  style?: CSSProperties\n  disabled?: boolean\n  onMouseEnter?: () => void\n  onMouseLeave?: () => void\n  color?: Color\n  onClick?: () => void\n  onBlur?: () => void\n}",
      "file": "/components/Input/InputWrapper.tsx"
    },
    "JsonInputProps": {
      "name": "JsonInputProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "setErrorMessage": {
          "optional": true,
          "type": "function"
        },
        "setShowJSONClearButton": {
          "optional": true,
          "type": "Dispatch"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "clearValue": {
          "optional": true,
          "type": "boolean"
        },
        "setClearValue": {
          "optional": true,
          "type": "Dispatch"
        }
      },
      "code": "type JsonInputProps = {\n  value?: string\n  onChange?: (target) => void\n  setErrorMessage?: (value: string) => void\n  setShowJSONClearButton?: Dispatch<SetStateAction<boolean>>\n  disabled?: boolean\n  clearValue?: boolean\n  setClearValue?: Dispatch<SetStateAction<boolean>>\n}",
      "file": "/components/Input/JsonInput.tsx"
    },
    "MarkdownInputProps": {
      "name": "MarkdownInputProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type MarkdownInputProps = {\n  value?: string\n  onChange?: (target) => void\n  disabled?: boolean\n}",
      "file": "/components/Input/MarkdownInput.tsx"
    },
    "PasswordInputProps": {
      "name": "PasswordInputProps",
      "props": {
        "value": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        }
      },
      "code": "type PasswordInputProps = {\n  value?: string\n  onChange?: (target) => void\n  disabled?: boolean\n  large?: boolean\n  icon?: FunctionComponent<Icon> | ReactNode\n}",
      "file": "/components/Input/PasswordInput.tsx"
    },
    "SingleProps": {
      "name": "SingleProps",
      "props": {
        "type": {
          "optional": true,
          "type": "string"
        },
        "inputRef": {
          "optional": true,
          "type": "RefObject"
        },
        "pattern": {
          "optional": true,
          "type": "string"
        },
        "props": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onKeyDown": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type SingleProps = {\n  type?: string\n  inputRef?: RefObject<any>\n  pattern?: string\n  props?: any\n  onKeyDown?: (e: any) => void\n  style?: CSSProperties\n}",
      "file": "/components/Input/index.tsx"
    },
    "LabelProps": {
      "name": "LabelProps",
      "props": {
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "labelColor": {
          "optional": true,
          "type": "Color"
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionColor": {
          "optional": true,
          "type": "Color"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "iconColor": {
          "optional": true,
          "type": "Color"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "labelWidth": {
          "optional": true,
          "type": "number"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "direction": {
          "optional": true,
          "type": [
            {
              "value": "row"
            },
            {
              "value": "column"
            }
          ]
        }
      },
      "code": "type LabelProps = {\n  label?: ReactNode\n  labelColor?: Color\n  wrap?: boolean\n  description?: string\n  descriptionColor?: Color\n  icon?: FunctionComponent<Icon> | ReactNode\n  iconColor?: Color\n  children?: ReactNode\n  labelWidth?: number\n  space?: Space\n  style?: Style\n  direction?: 'row' | 'column'\n}",
      "file": "/components/Label/index.tsx"
    },
    "LineGraphProps": {
      "name": "LineGraphProps",
      "props": {
        "data": {
          "type": "LineGraphDataInput"
        },
        "xFormat": {
          "optional": true,
          "type": "LineXGraphFormat"
        },
        "valueFormat": {
          "optional": true,
          "type": [
            "NumberFormat",
            "string"
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type LineGraphProps = {\n  data: LineGraphDataInput\n  xFormat?: LineXGraphFormat\n  valueFormat?: NumberFormat | string\n  label?: string\n}",
      "file": "/components/LineGraph/index.tsx"
    },
    "MasonryGridProps": {
      "name": "MasonryGridProps",
      "props": {
        "children": {
          "type": [
            "ReactNode",
            "ReactChildren"
          ]
        },
        "columns": {
          "optional": true,
          "type": "number"
        },
        "gap": {
          "optional": true,
          "type": "number"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type MasonryGridProps = {\n  children: ReactNode | ReactChildren\n  columns?: number\n  gap?: number\n  style?: CSSProperties\n}",
      "file": "/components/MasonryGrid/index.tsx"
    },
    "MenuHeaderProps": {
      "name": "MenuHeaderProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "id": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type MenuHeaderProps = {\n  children?: ReactNode\n  style?: CSSProperties\n  onClick?: (e: MouseEvent<HTMLDivElement>) => void\n  id?: string\n}",
      "file": "/components/Menu/index.tsx"
    },
    "MenuItemProps": {
      "name": "MenuItemProps",
      "props": {
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            "FC"
          ]
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        },
        "isNested": {
          "optional": true,
          "type": "boolean"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        }
      },
      "code": "type MenuItemProps = {\n  children?: ReactNode | FC\n  style?: Style\n  onClick?: (e: MouseEvent<HTMLDivElement>) => void\n  isActive?: boolean\n  isNested?: boolean\n  weight?: Weight\n}",
      "file": "/components/Menu/index.tsx"
    },
    "MenuProps": {
      "name": "MenuProps",
      "props": {
        "data": {
          "optional": true,
          "type": "MenuData"
        },
        "active": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "isActive": {
          "optional": true,
          "type": "function"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "header": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "collapse": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type MenuProps = {\n  data?: MenuData\n  active?: any\n  isActive?: (value: any) => boolean\n  onChange?: (value: any, header?: any) => void\n  style?: Style\n  children?: ReactNode | ReactNode[]\n  header?: ReactNode | ReactNode[]\n  collapse?: boolean\n}",
      "file": "/components/Menu/index.tsx"
    },
    "ObjectListProps": {
      "name": "ObjectListProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "schema": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ObjectListProps = {\n  label?: string\n  space?: Space\n  description?: string\n  descriptionBottom?: string\n  style?: CSSProperties\n  indent?: boolean\n  schema?: any\n  onClick?: () => void\n}",
      "file": "/components/ObjectList/index.tsx"
    },
    "PositionProps": {
      "name": "PositionProps",
      "props": {
        "width": {
          "optional": true,
          "type": [
            "number",
            {
              "value": "100%"
            },
            {
              "value": "target"
            },
            {
              "value": "auto"
            }
          ]
        },
        "position": {
          "optional": true,
          "type": [
            {
              "value": "left"
            },
            {
              "value": "right"
            },
            {
              "value": "top"
            },
            {
              "value": "bottom"
            }
          ]
        },
        "placement": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "left"
            },
            {
              "value": "right"
            }
          ]
        },
        "variant": {
          "optional": true,
          "type": [
            {
              "value": "over"
            },
            {
              "value": "detached"
            }
          ]
        },
        "offset": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "selectTarget": {
          "optional": true,
          "type": "SelectTarget"
        }
      },
      "code": "type PositionProps = {\n  width?: number | '100%' | 'target' | 'auto'\n  position?: 'left' | 'right' | 'top' | 'bottom'\n  placement?: 'center' | 'left' | 'right'\n  variant?: 'over' | 'detached'\n  offset?: { x: number; y: number }\n  selectTarget?: SelectTarget\n}",
      "file": "/components/Overlay/index.tsx"
    },
    "OverlayProps": {
      "name": "OverlayProps",
      "props": {
        "Component": {
          "type": "ComponentType"
        },
        "props": {
          "type": "P"
        },
        "target": {
          "type": "Target"
        },
        "positionProps": {
          "type": "PositionProps"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type OverlayProps<P = any> = {\n  Component: ComponentType<P>\n  props: P\n  target: Target\n  positionProps: PositionProps\n  style?: CSSProperties\n}",
      "file": "/components/Overlay/index.tsx"
    },
    "PageProps": {
      "name": "PageProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "onDragOver": {
          "optional": true,
          "type": "function"
        },
        "onDragLeave": {
          "optional": true,
          "type": "function"
        },
        "onDrop": {
          "optional": true,
          "type": "function"
        },
        "style": {
          "optional": true,
          "type": "Style"
        }
      },
      "code": "type PageProps = {\n  children: ReactNode\n  onDragOver?: (e: DragEvent) => void\n  onDragLeave?: (e: DragEvent) => void\n  onDrop?: (e: DragEvent) => void\n  style?: Style\n}",
      "file": "/components/Page/index.tsx"
    },
    "AppProps": {
      "name": "AppProps",
      "props": {
        "style": {
          "optional": true,
          "type": "Style"
        },
        "children": {
          "type": "ReactNode"
        }
      },
      "code": "type AppProps = {\n  style?: Style\n  children: ReactNode\n}",
      "file": "/components/Page/index.tsx"
    },
    "PieGraphProps": {
      "name": "PieGraphProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "value": {
          "optional": true,
          "type": "number"
        },
        "size": {
          "optional": true,
          "type": "number"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type PieGraphProps = {\n  data: {\n    value: number | { [key: string]: number }\n    label: string\n    color?: string\n  }[]\n  value?: number\n  size?: number\n  space?: Space\n  color?: Color\n}",
      "file": "/components/PieGraph/index.tsx"
    },
    "ProgressBarProps": {
      "name": "ProgressBarProps",
      "props": {
        "progress": {
          "optional": true,
          "type": "number"
        },
        "circle": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type ProgressBarProps = {\n  progress?: number\n  circle?: boolean\n}",
      "file": "/components/ProgressBar/index.tsx"
    },
    "ProviderProps": {
      "name": "ProviderProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "client": {
          "optional": true,
          "type": "BasedClient"
        },
        "theme": {
          "optional": true,
          "type": [
            {
              "value": "light"
            },
            {
              "value": "dark"
            }
          ]
        },
        "themes": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "fill": {
          "optional": true,
          "type": "boolean"
        },
        "path": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type ProviderProps = {\n  children?: ReactNode\n  style?: CSSProperties\n  client?: BasedClient\n  theme?: 'light' | 'dark'\n  themes?: {\n    base?: object\n    dark?: object\n  }\n  fill?: boolean\n  path?: string\n}",
      "file": "/components/Provider/index.tsx"
    },
    "RadioButtonsProps": {
      "name": "RadioButtonsProps",
      "props": {
        "value": {
          "optional": true,
          "type": [
            "string",
            "boolean",
            "number"
          ]
        },
        "data": {
          "optional": true,
          "type": "Array"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "direction": {
          "optional": true,
          "type": [
            {
              "value": "horizontal"
            },
            {
              "value": "vertical"
            }
          ]
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "cards": {
          "optional": true,
          "type": "boolean"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type RadioButtonsProps = {\n  value?: string | boolean | number\n  data?: Array<{\n    label?: string\n    value: string | boolean | number\n    description?: string\n  }>\n  label?: string\n  description?: string\n  direction?: 'horizontal' | 'vertical'\n  indent?: boolean\n  disabled?: boolean\n  descriptionBottom?: string\n  // error?: (value: string | boolean | number) => string\n  onChange?: (value: string | number | boolean) => void\n  space?: Space\n  style?: CSSProperties\n  cards?: boolean\n  color?: Color\n}",
      "file": "/components/RadioButtons/index.tsx"
    },
    "RecordPageProps": {
      "name": "RecordPageProps",
      "props": {
        "id": {
          "optional": true,
          "type": "string"
        },
        "fields": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "recordValueType": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type RecordPageProps = {\n  id?: string\n  fields?: any\n  onChange?: (fields: any) => void\n  recordValueType?: string\n  style?: CSSProperties\n}",
      "file": "/components/RecordList/RecordPage.tsx"
    },
    "SingleRecordListItemProps": {
      "name": "SingleRecordListItemProps",
      "props": {
        "index": {
          "optional": true,
          "type": "number"
        },
        "objectKey": {
          "optional": true,
          "type": "string"
        },
        "objectValue": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "object": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "setTempObj": {
          "optional": true,
          "type": "function"
        },
        "itemType": {
          "optional": true,
          "type": "string"
        }
      },
      "code": "type SingleRecordListItemProps = {\n  index?: number\n  objectKey?: string\n  objectValue?: any\n  onChange?: (value: any) => void\n  object?: {}\n  setTempObj?: (value: any) => void\n  itemType?: string\n}",
      "file": "/components/RecordList/SingleRecordListItem.tsx"
    },
    "RecordListProps": {
      "name": "RecordListProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "schema": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "value": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type RecordListProps = {\n  label?: string\n  description?: string\n  schema?: any\n  space?: Space\n  value?: {}\n  onClick?: () => void\n  onChange?: (value: any) => void\n}",
      "file": "/components/RecordList/index.tsx"
    },
    "ResultCardProps": {
      "name": "ResultCardProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "value": {
          "optional": true,
          "type": [
            "number",
            "TSTypeLiteral"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "format": {
          "optional": true,
          "type": "NumberFormat"
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type ResultCardProps = {\n  label?: string\n  value?: number | { [key: string]: number | string }\n  style?: CSSProperties\n  format?: NumberFormat\n  space?: Space\n}",
      "file": "/components/ResultCard/index.tsx"
    },
    "RightSidebarProps": {
      "name": "RightSidebarProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type RightSidebarProps = {\n  children?: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/RightSidebar/index.tsx"
    },
    "ScatterResultProps": {
      "name": "ScatterResultProps",
      "props": {
        "data": {
          "type": {
            "array": "TSTypeLiteral"
          }
        },
        "xLabel": {
          "optional": true,
          "type": [
            "string",
            "number",
            "NumberFormat"
          ]
        },
        "yLabel": {
          "optional": true,
          "type": [
            "string",
            "number",
            "NumberFormat"
          ]
        },
        "info": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "xLabelFormat": {
          "optional": true,
          "type": "NumberFormat"
        },
        "yLabelFormat": {
          "optional": true,
          "type": "NumberFormat"
        },
        "header": {
          "optional": true,
          "type": "string"
        },
        "width": {
          "optional": true,
          "type": "number"
        },
        "height": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type ScatterResultProps = {\n  data: {\n    time: number\n    points: {\n      x: number\n      y: number\n      label: string\n      color: any\n      info?: { [key: string]: string | number }\n    }[]\n  }[]\n  xLabel?: string | number | NumberFormat\n  yLabel?: string | number | NumberFormat\n  info?: {\n    [key: string]: { format: string; label: string | number }\n  }\n  xLabelFormat?: NumberFormat\n  yLabelFormat?: NumberFormat\n  header?: string\n  width?: number\n  height?: number\n}",
      "file": "/components/ScatterResult/index.tsx"
    },
    "MultiSelectProps": {
      "name": "MultiSelectProps",
      "props": {
        "color": {
          "optional": true,
          "type": "Color"
        },
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "onChange": {
          "type": "function"
        },
        "options": {
          "type": {
            "array": "TSParenthesizedType"
          }
        },
        "overlay": {
          "optional": true,
          "type": "PositionProps"
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "values": {
          "optional": true,
          "type": {
            "array": "Value"
          }
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type MultiSelectProps = {\n  color?: Color\n  filterable?: boolean | 'create'\n  label?: string\n  onChange: (values: Value[]) => void\n  options: (Option | Value)[]\n  overlay?: PositionProps\n  placeholder?: string\n  style?: Style\n  values?: Value[]\n  ghost?: boolean\n}",
      "file": "/components/Select/MultiSelect.tsx"
    },
    "SelectProps": {
      "name": "SelectProps",
      "props": {
        "value": {
          "optional": true,
          "type": "Value"
        },
        "options": {
          "type": {
            "array": "TSParenthesizedType"
          }
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "filterable": {
          "optional": true,
          "type": [
            "boolean",
            {
              "value": "create"
            }
          ]
        },
        "placeholder": {
          "optional": true,
          "type": "string"
        },
        "overlay": {
          "optional": true,
          "type": "PositionProps"
        },
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "name": {
          "optional": true,
          "type": "string"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "id": {
          "optional": true,
          "type": "string"
        },
        "ghost": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type SelectProps = {\n  value?: Value\n  options: (Option | Value)[]\n  onChange?: (value: Value) => void\n  filterable?: boolean | 'create'\n  placeholder?: string\n  overlay?: PositionProps\n  label?: ReactNode\n  name?: string\n  color?: Color\n  style?: Style\n  id?: string\n  ghost?: boolean\n  onClick?: () => void\n}",
      "file": "/components/Select/Select.tsx"
    },
    "SeparatorProps": {
      "name": "SeparatorProps",
      "props": {
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "space": {
          "optional": true,
          "type": "Space"
        }
      },
      "code": "type SeparatorProps = {\n  style?: CSSProperties\n  children?: ReactNode\n  space?: Space\n}",
      "file": "/components/Separator/index.tsx"
    },
    "SetListProps": {
      "name": "SetListProps",
      "props": {
        "description": {
          "optional": true,
          "type": "string"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "value": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "schema": {
          "optional": true,
          "type": "TSAnyKeyword"
        }
      },
      "code": "type SetListProps = {\n  description?: string\n  disabled?: boolean\n  space?: Space\n  indent?: boolean\n  onChange?(items: {}): void\n  value?: any\n  schema?: any\n}",
      "file": "/components/SetList/index.tsx"
    },
    "SidebarProps": {
      "name": "SidebarProps",
      "props": {
        "data": {
          "optional": true,
          "type": "SideBarData"
        },
        "isExpanded": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "active": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "header": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "expandable": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type SidebarProps = {\n  data?: SideBarData\n  isExpanded?: boolean\n  style?: Style\n  active?: any\n  onChange?: (value: any) => void\n  children?: ReactNode | ReactNode[]\n  header?: ReactNode | ReactNode[]\n  expandable?: boolean\n}",
      "file": "/components/Sidebar/index.tsx"
    },
    "SidebarItemProps": {
      "name": "SidebarItemProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "label": {
          "optional": true,
          "type": "ReactNode"
        },
        "href": {
          "optional": true,
          "type": "string"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "expanded": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        }
      },
      "code": "type SidebarItemProps = {\n  children?: ReactNode\n  label?: ReactNode\n  href?: string\n  isActive?: boolean\n  onClick?: (e: MouseEvent<HTMLDivElement>) => void\n  expanded?: boolean\n  icon?: FunctionComponent<Icon> | ReactNode\n}",
      "file": "/components/Sidebar/index.tsx"
    },
    "SpacerProps": {
      "name": "SpacerProps",
      "props": {
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type SpacerProps = {\n  space?: Space\n  style?: CSSProperties\n}",
      "file": "/components/Spacer/index.tsx"
    },
    "StepsProps": {
      "name": "StepsProps",
      "props": {
        "active": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        },
        "data": {
          "optional": true,
          "type": "TSTypeLiteral"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type StepsProps = {\n  active?: any\n  style?: Style\n  onChange?: (key: string) => void\n  data?: {\n    [key: string]: ReactNode\n  }\n  color?: Color\n}",
      "file": "/components/Steps/index.tsx"
    },
    "SystemMenuHeaderProps": {
      "name": "SystemMenuHeaderProps",
      "props": {
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type SystemMenuHeaderProps = {\n  children?: ReactNode\n  style?: CSSProperties\n}",
      "file": "/components/SystemLabel/index.tsx"
    },
    "SystemMenuItemProps": {
      "name": "SystemMenuItemProps",
      "props": {
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            "FC"
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "href": {
          "optional": true,
          "type": "string"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        },
        "isNested": {
          "optional": true,
          "type": "boolean"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        }
      },
      "code": "type SystemMenuItemProps = {\n  children?: ReactNode | FC\n  style?: CSSProperties\n  href?: string\n  isActive?: boolean\n  isNested?: boolean\n  weight?: Weight\n}",
      "file": "/components/SystemLabel/index.tsx"
    },
    "TableFromQueryProps": {
      "name": "TableFromQueryProps",
      "props": {
        "fields": {
          "type": {
            "array": "string"
          }
        },
        "query": {
          "type": "TSTypeLiteral"
        },
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "target": {
          "optional": true,
          "type": "string"
        },
        "language": {
          "optional": true,
          "type": "string"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "onClick": {
          "type": "DataEventHandler"
        },
        "onAction": {
          "optional": true,
          "type": "OnAction"
        },
        "setSelectedRowCheckboxes": {
          "optional": true,
          "type": "function"
        },
        "selectedRowCheckboxes": {
          "optional": true,
          "type": "Array"
        },
        "setTableIsEmpty": {
          "optional": true,
          "type": "function"
        },
        "isMultiref": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type TableFromQueryProps = {\n  fields: string[]\n  query: { [key: string]: any }\n  width: number\n  height: number\n  target?: string\n  language?: string\n  style?: Style\n  onClick: DataEventHandler\n  onAction?: OnAction\n  setSelectedRowCheckboxes?: (selectedRowCheckboxes: any) => void\n  selectedRowCheckboxes?: Array<number>\n  setTableIsEmpty?: (tableIsEmpty: boolean) => void\n  isMultiref?: boolean\n}",
      "file": "/components/Table/TableFromQuery.tsx"
    },
    "TableProps": {
      "name": "TableProps",
      "props": {
        "fields": {
          "optional": true,
          "type": "Fields"
        },
        "query": {
          "optional": true,
          "type": "function"
        },
        "data": {
          "optional": true,
          "type": {
            "array": "TSObjectKeyword"
          }
        },
        "width": {
          "optional": true,
          "type": "number"
        },
        "height": {
          "optional": true,
          "type": "number"
        },
        "style": {
          "optional": true,
          "type": "Style"
        },
        "language": {
          "optional": true,
          "type": "string"
        },
        "target": {
          "optional": true,
          "type": "string"
        },
        "onAction": {
          "optional": true,
          "type": "OnAction"
        },
        "isMultiref": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type TableProps = {\n  fields?: Fields\n  query?: (\n    offset: number,\n    limit: number,\n    sortField: string,\n    sortOrder: string\n  ) => InfiniteListQueryResponse\n  data?: object[]\n  width?: number\n  height?: number\n  style?: Style\n  language?: string\n  target?: string\n  onAction?: OnAction\n  isMultiref?: boolean\n  onClick?: (\n    item: { [key: string]: string },\n    field: string,\n    fieldType: string\n  ) => void\n}",
      "file": "/components/Table/index.tsx"
    },
    "TabProps": {
      "name": "TabProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "ReactNode"
            }
          ]
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type TabProps = {\n  // leave the label prop here!\n  label?: string\n  children?: ReactNode | ReactNode[]\n  style?: CSSProperties\n  //  icon?: ReactNode\n}",
      "file": "/components/Tabs/Tab.tsx"
    },
    "TabsProps": {
      "name": "TabsProps",
      "props": {
        "children": {
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "large": {
          "optional": true,
          "type": "boolean"
        },
        "activeTab": {
          "optional": true,
          "type": "number"
        },
        "setActiveTab": {
          "optional": true,
          "type": "function"
        },
        "sameHeight": {
          "optional": true,
          "type": "boolean"
        }
      },
      "code": "type TabsProps = {\n  children: ReactNode\n  style?: CSSProperties\n  space?: Space\n  large?: boolean\n  activeTab?: number\n  setActiveTab?: (index: number) => void\n  sameHeight?: boolean\n}",
      "file": "/components/Tabs/Tabs.tsx"
    },
    "TextProps": {
      "name": "TextProps",
      "props": {
        "capitalize": {
          "optional": true,
          "type": "boolean"
        },
        "children": {
          "type": "ReactNode"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "italic": {
          "optional": true,
          "type": "boolean"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        },
        "onDoubleClick": {
          "optional": true,
          "type": "function"
        },
        "selectable": {
          "optional": true,
          "type": "boolean"
        },
        "size": {
          "optional": true,
          "type": "Size"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "textAlign": {
          "optional": true,
          "type": [
            {
              "value": "center"
            },
            {
              "value": "right"
            },
            {
              "value": "left"
            }
          ]
        },
        "variant": {
          "optional": true,
          "type": "ColorVariant"
        },
        "weight": {
          "optional": true,
          "type": "Weight"
        },
        "wrap": {
          "optional": true,
          "type": "boolean"
        },
        "typo": {
          "optional": true,
          "type": "Typo"
        }
      },
      "code": "type TextProps = {\n  capitalize?: boolean\n  children: ReactNode\n  color?: Color\n  italic?: boolean\n  onClick?: (e: MouseEvent<HTMLDivElement>) => void\n  onDoubleClick?: (e: MouseEvent<HTMLDivElement>) => void\n  selectable?: boolean\n  size?: Size\n  space?: Space\n  style?: CSSProperties\n  textAlign?: 'center' | 'right' | 'left'\n  variant?: ColorVariant\n  weight?: Weight\n  wrap?: boolean\n  typo?: Typo\n}",
      "file": "/components/Text/index.tsx"
    },
    "ThumbnailProps": {
      "name": "ThumbnailProps",
      "props": {
        "size": {
          "optional": true,
          "type": "Size"
        },
        "img": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "outline": {
          "optional": true,
          "type": "boolean"
        },
        "counter": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type ThumbnailProps = {\n  size?: Size\n  img?: string\n  icon?: FunctionComponent<Icon> | ReactNode\n  color?: Color\n  space?: Space\n  style?: CSSProperties\n  label?: string\n  outline?: boolean\n  counter?: number\n}",
      "file": "/components/Thumbnail/index.tsx"
    },
    "ToastProps": {
      "name": "ToastProps",
      "props": {
        "label": {
          "optional": true,
          "type": "string"
        },
        "icon": {
          "optional": true,
          "type": [
            "FunctionComponent",
            "ReactNode"
          ]
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "type": {
          "optional": true,
          "type": [
            {
              "value": "success"
            },
            {
              "value": "error"
            },
            {
              "value": "warning"
            }
          ]
        }
      },
      "code": "type ToastProps = {\n  label?: string\n  icon?: FunctionComponent<Icon> | ReactNode\n  // topLeft?: ReactNode\n  // topRight?: ReactNode\n  description?: string\n  children?: ReactNode\n  style?: CSSProperties\n  type?: 'success' | 'error' | 'warning'\n}",
      "file": "/components/Toast/Toast.tsx"
    },
    "PositionStyleProps": {
      "name": "PositionStyleProps",
      "props": {
        "top": {
          "optional": true,
          "type": "number"
        },
        "bottom": {
          "optional": true,
          "type": "number"
        },
        "left": {
          "optional": true,
          "type": "number"
        },
        "right": {
          "optional": true,
          "type": "number"
        }
      },
      "code": "type PositionStyleProps = {\n  top?: number\n  bottom?: number\n  left?: number\n  right?: number\n}",
      "file": "/components/Toast/ToastProvider.tsx"
    },
    "ToggleProps": {
      "name": "ToggleProps",
      "props": {
        "value": {
          "optional": true,
          "type": "boolean"
        },
        "label": {
          "optional": true,
          "type": "string"
        },
        "description": {
          "optional": true,
          "type": "string"
        },
        "descriptionBottom": {
          "optional": true,
          "type": "string"
        },
        "text": {
          "optional": true,
          "type": "string"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "indent": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "color": {
          "optional": true,
          "type": "Color"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ToggleProps = {\n  value?: boolean\n  label?: string\n  description?: string\n  descriptionBottom?: string\n  text?: string\n  disabled?: boolean\n  indent?: boolean\n  style?: CSSProperties\n  space?: Space\n  color?: Color\n  onChange?: (value: boolean) => void\n}",
      "file": "/components/Toggle/index.tsx"
    },
    "ToggleGroupProps": {
      "name": "ToggleGroupProps",
      "props": {
        "data": {
          "optional": true,
          "type": [
            "Array",
            "Array"
          ]
        },
        "space": {
          "optional": true,
          "type": "Space"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "onChange": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type ToggleGroupProps = {\n  data?: Array<string> | Array<ReactNode>\n  space?: Space\n  style?: CSSProperties\n  onChange?: (value: number) => void\n}",
      "file": "/components/ToggleGroup/index.tsx"
    },
    "TopbarTabProps": {
      "name": "TopbarTabProps",
      "props": {
        "href": {
          "optional": true,
          "type": "string"
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "isActive": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "type": [
            "ReactNode",
            {
              "array": "string"
            }
          ]
        }
      },
      "code": "type TopbarTabProps = {\n  href?: string\n  children?: ReactNode\n  isActive?: boolean\n  icon?: ReactNode | string[]\n}",
      "file": "/components/Topbar/index.tsx"
    },
    "TopbarProps": {
      "name": "TopbarProps",
      "props": {
        "data": {
          "optional": true,
          "type": "TSObjectKeyword"
        },
        "selected": {
          "optional": true,
          "type": "string"
        },
        "prefix": {
          "optional": true,
          "type": "string"
        },
        "onFilter": {
          "optional": true,
          "type": "function"
        },
        "onProfile": {
          "optional": true,
          "type": "function"
        },
        "breadcrumbs": {
          "optional": true,
          "type": "ReactNode"
        },
        "logo": {
          "optional": true,
          "type": [
            "FC",
            "ReactNode"
          ]
        },
        "children": {
          "optional": true,
          "type": "ReactNode"
        },
        "noLogo": {
          "optional": true,
          "type": "boolean"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        },
        "icons": {
          "optional": true,
          "type": [
            "ReactNode",
            "string"
          ]
        },
        "avatar": {
          "optional": true,
          "type": "ReactNode"
        },
        "onClick": {
          "optional": true,
          "type": "function"
        }
      },
      "code": "type TopbarProps = {\n  data?: object\n  selected?: string\n  prefix?: string\n  onFilter?: (params: any) => any\n  onProfile?: () => void\n  breadcrumbs?: ReactNode\n  logo?: FC | ReactNode\n  children?: ReactNode\n  noLogo?: boolean\n  style?: CSSProperties\n  icons?: ReactNode | string\n  avatar?: ReactNode\n  onClick?: () => void\n}",
      "file": "/components/Topbar/index.tsx"
    },
    "ValueSliderProps": {
      "name": "ValueSliderProps",
      "props": {
        "items": {
          "optional": true,
          "type": "Items"
        },
        "max": {
          "optional": true,
          "type": "number"
        },
        "min": {
          "optional": true,
          "type": "number"
        },
        "alwaysShowLabel": {
          "optional": true,
          "type": "boolean"
        },
        "Label": {
          "optional": true,
          "type": "FC"
        },
        "step": {
          "optional": true,
          "type": "number"
        },
        "onStartSliding": {
          "optional": true,
          "type": "function"
        },
        "onEndSliding": {
          "optional": true,
          "type": "function"
        },
        "value": {
          "optional": true,
          "type": "number"
        },
        "onChange": {
          "type": "function"
        },
        "color": {
          "optional": true,
          "type": "Color"
        }
      },
      "code": "type ValueSliderProps = {\n  items?: Items\n  max?: number\n  min?: number\n  alwaysShowLabel?: boolean\n  Label?: FC<{\n    value?: number | Item\n    max?: number\n    min?: number\n    index?: number\n  }>\n  step?: number\n  onStartSliding?: () => void\n  onEndSliding?: () => void\n  value?: number\n  onChange: (value: number) => void\n  color?: Color\n}",
      "file": "/components/ValueSlider/index.tsx"
    },
    "ListItemProps": {
      "name": "ListItemProps",
      "props": {
        "index": {
          "optional": true,
          "type": "number"
        },
        "data": {
          "optional": true,
          "type": "TSAnyKeyword"
        },
        "style": {
          "optional": true,
          "type": "CSSProperties"
        }
      },
      "code": "type ListItemProps = {\n  index?: number\n  data?: any\n  style?: CSSProperties\n}",
      "file": "/components/VirtualizedList/ListItem.tsx"
    }
  },
  "types": {
    "SizeInt": {
      "name": "SizeInt",
      "types": [
        {
          "type": {
            "value": 8
          }
        },
        {
          "type": {
            "value": 9
          }
        },
        {
          "type": {
            "value": 10
          }
        },
        {
          "type": {
            "value": 11
          }
        },
        {
          "type": {
            "value": 12
          }
        },
        {
          "type": {
            "value": 13
          }
        },
        {
          "type": {
            "value": 14
          }
        },
        {
          "type": {
            "value": 15
          }
        },
        {
          "type": {
            "value": 16
          }
        },
        {
          "type": {
            "value": 18
          }
        },
        {
          "type": {
            "value": 20
          }
        },
        {
          "type": {
            "value": 22
          }
        },
        {
          "type": {
            "value": 24
          }
        },
        {
          "type": {
            "value": 32
          }
        },
        {
          "type": {
            "value": 36
          }
        },
        {
          "type": {
            "value": 40
          }
        },
        {
          "type": {
            "value": 48
          }
        },
        {
          "type": {
            "value": 64
          }
        }
      ],
      "code": "type SizeInt =\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 18\n  | 20\n  | 22\n  | 24\n  | 32\n  | 36\n  | 40\n  | 48\n  | 64",
      "file": "/types/index.ts"
    },
    "Size": {
      "name": "Size",
      "types": [
        {
          "type": {}
        },
        {
          "type": "SizeInt"
        }
      ],
      "code": "type Size = `${SizeInt}px` | SizeInt",
      "file": "/types/index.ts"
    },
    "WeightInt": {
      "name": "WeightInt",
      "types": [
        {
          "type": {
            "value": 400
          }
        },
        {
          "type": {
            "value": 500
          }
        },
        {
          "type": {
            "value": 600
          }
        },
        {
          "type": {
            "value": 700
          }
        }
      ],
      "code": "type WeightInt = 400 | 500 | 600 | 700",
      "file": "/types/index.ts"
    },
    "Weight": {
      "name": "Weight",
      "types": [
        {
          "type": "WeightInt"
        },
        {
          "type": {}
        }
      ],
      "code": "type Weight = WeightInt | `${WeightInt}`",
      "file": "/types/index.ts"
    },
    "Typo": {
      "name": "Typo",
      "types": [
        {
          "type": {
            "value": "title1"
          }
        },
        {
          "type": {
            "value": "title2"
          }
        },
        {
          "type": {
            "value": "subtitle600"
          }
        },
        {
          "type": {
            "value": "subtitle500"
          }
        },
        {
          "type": {
            "value": "subtitle400"
          }
        },
        {
          "type": {
            "value": "subtext600"
          }
        },
        {
          "type": {
            "value": "subtext500"
          }
        },
        {
          "type": {
            "value": "subtext400"
          }
        },
        {
          "type": {
            "value": "body600"
          }
        },
        {
          "type": {
            "value": "body500"
          }
        },
        {
          "type": {
            "value": "body400"
          }
        },
        {
          "type": {
            "value": "caption600"
          }
        },
        {
          "type": {
            "value": "caption500"
          }
        },
        {
          "type": {
            "value": "caption400"
          }
        }
      ],
      "code": "type Typo =\n  | 'title1'\n  | 'title2'\n  | 'subtitle600'\n  | 'subtitle500'\n  | 'subtitle400'\n  | 'subtext600'\n  | 'subtext500'\n  | 'subtext400'\n  | 'body600'\n  | 'body500'\n  | 'body400'\n  | 'caption600'\n  | 'caption500'\n  | 'caption400'",
      "file": "/types/index.ts"
    },
    "SpaceInt": {
      "name": "SpaceInt",
      "types": [
        {
          "type": {
            "value": 0
          }
        },
        {
          "type": {
            "value": 2
          }
        },
        {
          "type": {
            "value": 4
          }
        },
        {
          "type": {
            "value": 8
          }
        },
        {
          "type": {
            "value": 12
          }
        },
        {
          "type": {
            "value": 16
          }
        },
        {
          "type": {
            "value": 20
          }
        },
        {
          "type": {
            "value": 24
          }
        },
        {
          "type": {
            "value": 28
          }
        },
        {
          "type": {
            "value": 32
          }
        },
        {
          "type": {
            "value": 48
          }
        }
      ],
      "code": "type SpaceInt = 0 | 2 | 4 | 8 | 12 | 16 | 20 | 24 | 28 | 32 | 48",
      "file": "/types/index.ts"
    },
    "Space": {
      "name": "Space",
      "types": [
        {
          "type": "SpaceInt"
        },
        {
          "type": {}
        },
        {
          "type": {
            "value": true
          }
        }
      ],
      "code": "type Space = SpaceInt | `${SpaceInt}px` | true",
      "file": "/types/index.ts"
    },
    "Icon": {
      "name": "Icon",
      "types": [
        {
          "type": "SVGProps"
        },
        {
          "type": "IconProps"
        }
      ],
      "code": "type Icon = SVGProps<SVGSVGElement> & IconProps",
      "file": "/types/index.ts"
    },
    "Char": {
      "name": "Char",
      "types": [
        {
          "type": {
            "value": "A"
          }
        },
        {
          "type": {
            "value": "B"
          }
        },
        {
          "type": {
            "value": "C"
          }
        },
        {
          "type": {
            "value": "D"
          }
        },
        {
          "type": {
            "value": "E"
          }
        },
        {
          "type": {
            "value": "F"
          }
        },
        {
          "type": {
            "value": "G"
          }
        },
        {
          "type": {
            "value": "H"
          }
        },
        {
          "type": {
            "value": "I"
          }
        },
        {
          "type": {
            "value": "J"
          }
        },
        {
          "type": {
            "value": "K"
          }
        },
        {
          "type": {
            "value": "L"
          }
        },
        {
          "type": {
            "value": "M"
          }
        },
        {
          "type": {
            "value": "N"
          }
        },
        {
          "type": {
            "value": "O"
          }
        },
        {
          "type": {
            "value": "P"
          }
        },
        {
          "type": {
            "value": "Q"
          }
        },
        {
          "type": {
            "value": "R"
          }
        },
        {
          "type": {
            "value": "S"
          }
        },
        {
          "type": {
            "value": "T"
          }
        },
        {
          "type": {
            "value": "U"
          }
        },
        {
          "type": {
            "value": "V"
          }
        },
        {
          "type": {
            "value": "W"
          }
        },
        {
          "type": {
            "value": "X"
          }
        },
        {
          "type": {
            "value": "Y"
          }
        },
        {
          "type": {
            "value": "Z"
          }
        },
        {
          "type": {
            "value": "0"
          }
        },
        {
          "type": {
            "value": "1"
          }
        },
        {
          "type": {
            "value": "2"
          }
        },
        {
          "type": {
            "value": "3"
          }
        },
        {
          "type": {
            "value": "4"
          }
        },
        {
          "type": {
            "value": "5"
          }
        },
        {
          "type": {
            "value": "6"
          }
        },
        {
          "type": {
            "value": "7"
          }
        },
        {
          "type": {
            "value": "8"
          }
        },
        {
          "type": {
            "value": "9"
          }
        },
        {
          "type": {
            "value": "`"
          }
        },
        {
          "type": {
            "value": "§"
          }
        },
        {
          "type": {
            "value": ","
          }
        },
        {
          "type": {
            "value": "."
          }
        },
        {
          "type": {
            "value": "/"
          }
        },
        {
          "type": {
            "value": ";"
          }
        },
        {
          "type": {
            "value": "'"
          }
        },
        {
          "type": {
            "value": "\\"
          }
        },
        {
          "type": {
            "value": "["
          }
        },
        {
          "type": {
            "value": "]"
          }
        },
        {
          "type": {
            "value": "-"
          }
        },
        {
          "type": {
            "value": "="
          }
        }
      ],
      "code": "type Char =\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'I'\n  | 'J'\n  | 'K'\n  | 'L'\n  | 'M'\n  | 'N'\n  | 'O'\n  | 'P'\n  | 'Q'\n  | 'R'\n  | 'S'\n  | 'T'\n  | 'U'\n  | 'V'\n  | 'W'\n  | 'X'\n  | 'Y'\n  | 'Z'\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '`'\n  | '§'\n  | ','\n  | '.'\n  | '/'\n  | ';'\n  | \"'\"\n  | '\\\\'\n  | '['\n  | ']'\n  | '-'\n  | '='",
      "file": "/types/index.ts"
    },
    "InputKey": {
      "name": "InputKey",
      "types": [
        {
          "type": {
            "value": "Enter"
          }
        },
        {
          "type": {
            "value": "Esc"
          }
        },
        {
          "type": {
            "value": "ArrowUp"
          }
        },
        {
          "type": {
            "value": "ArrowDown"
          }
        },
        {
          "type": {
            "value": "ArrowLeft"
          }
        },
        {
          "type": {
            "value": "ArrowRight"
          }
        },
        {
          "type": {
            "value": "Tab"
          }
        },
        {
          "type": "Char"
        }
      ],
      "code": "type InputKey =\n  | 'Enter'\n  | 'Esc'\n  | 'ArrowUp'\n  | 'ArrowDown'\n  | 'ArrowLeft'\n  | 'ArrowRight'\n  | 'Tab'\n  | Char",
      "file": "/types/index.ts"
    },
    "ModKeys": {
      "name": "ModKeys",
      "types": [
        {
          "type": {}
        },
        {
          "type": {}
        },
        {
          "type": {}
        }
      ],
      "code": "type ModKeys = `Cmd` | `Alt` | `Shift`",
      "file": "/types/index.ts"
    },
    "Key": {
      "name": "Key",
      "types": [
        {
          "type": "InputKey"
        },
        {
          "type": {}
        },
        {
          "type": "DoubleMod"
        },
        {
          "type": "DoubleMod"
        },
        {
          "type": "DoubleMod"
        }
      ],
      "code": "type Key =\n  | InputKey\n  | `${ModKeys}+${InputKey}`\n  | DoubleMod<'Cmd'>\n  | DoubleMod<'Alt'>\n  | DoubleMod<'Shift'>",
      "file": "/types/index.ts"
    },
    "Data": {
      "name": "Data",
      "types": [
        {
          "type": "T"
        },
        {
          "type": "TSTypeLiteral"
        }
      ],
      "code": "type Data<T = {}> = T & {\n  data: any\n  index?: number\n  exportData?: ExportData\n}",
      "file": "/types/index.ts"
    }
  }
}
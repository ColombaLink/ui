import { SVGProps, SyntheticEvent } from 'react'

type SizeInt = 11 | 12 | 13 | 14 | 15 | 18 | 20 | 24 | 32
export type Size = `${SizeInt}px` | SizeInt

type WeightInt = 400 | 500 | 600 | 700
export type Weight = WeightInt | `${WeightInt}`

type SpaceInt = 4 | 8 | 12 | 16 | 20 | 24 | 28 | 32
export type Space = SpaceInt | `${SpaceInt}px` | true

type AvatarSizeInt = 32 | 36 | 40 | 64
export type AvatarSize = `${AvatarSizeInt}px` | AvatarSizeInt

type CSSColorValue = `${
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'g'
  | 'h'
  | 'i'
  | 'j'
  | 'k'
  | 'l'
  | 'm'
  | 'n'
  | 'o'
  | 'p'
  | 'q'
  | 'r'
  | 's'
  | 't'
  | 'u'
  | 'v'
  | 'w'
  | 'x'
  | 'y'
  | 'z'
  | '#'}${string}`

export type Color =
  | 'Blue500'
  | 'Blue200'
  | 'WhiteWhite100'
  | 'GreyscaleGrey100'
  | 'TextPrimary'
  | 'TextSecondary'
  | 'TextDisabled'
  | 'TextInverted'
  | 'PrimaryMain'
  | 'PrimaryMainHover'
  | 'PrimaryMainSelected'
  | 'PrimaryMainContrast'
  | 'PrimaryMainContrastSecondary'
  | 'PrimaryLightAccent'
  | 'PrimaryLightHover'
  | 'PrimaryLightSelected'
  | 'PrimaryLightContrast'
  | 'PrimaryLightContrastSecondary'
  | 'PrimaryMainOutline'
  | 'PrimaryLightOutline'
  | 'OtherDisabledContent'
  | 'OtherDisabledBackground'
  | 'OtherDisabledOutline'
  | 'OtherForeground'
  | 'OtherForegroundInverted'
  | 'OtherDivider'
  | 'OtherOverlay'
  | 'OtherInputBorderDefault'
  | 'OtherInputBorderHover'
  | 'OtherInputBorderActive'
  | 'Background0dp'
  | 'Background1dp'
  | 'Background2dp'
  | 'Background3dp'
  | 'CalloutMain'
  | 'BlueBaby'
  | 'BlueBabyHover'
  | 'BlueBabyActive'
  | 'BlueBabyAccent'
  | 'BlueBabyForeground'
  | 'BlueSailor'
  | 'BlueSailorHover'
  | 'BlueSailorActive'
  | 'BlueSailorAccent'
  | 'BlueSailorForeground'
  | 'Pink'
  | 'PinkHover'
  | 'PinkActive'
  | 'PinkAccent'
  | 'PinkForeground'
  | 'PurpleBright'
  | 'PurpleBrightHover'
  | 'PurpleBrightActive'
  | 'PurpleBrightAccent'
  | 'PurpleBrightForeground'
  | 'Purple'
  | 'PurpleHover'
  | 'PurpleActive'
  | 'PurpleAccent'
  | 'PurpleForeground'
  | 'PurpleDark'
  | 'PurpleDarkHover'
  | 'PurpleDarkActive'
  | 'PurpleDarkAccent'
  | 'PurpleDarkForeground'
  | 'GreenForest'
  | 'GreenForestHover'
  | 'GreenForestActive'
  | 'GreenForestAccent'
  | 'GreenForestForeground'
  | 'Green'
  | 'GreenHover'
  | 'GreenActive'
  | 'GreenAccent'
  | 'GreenForeground'
  | 'Teal'
  | 'TealHover'
  | 'TealActive'
  | 'TealAccent'
  | 'TealForeground'
  | 'Mustard'
  | 'MustardHover'
  | 'MustardActive'
  | 'MustardAccent'
  | 'MustardForeground'
  | 'Yellow'
  | 'YellowHover'
  | 'YellowActive'
  | 'YellowAccent'
  | 'YellowForeground'
  | 'Orange'
  | 'OrangeHover'
  | 'OrangeActive'
  | 'OrangeAccent'
  | 'OrangeForeground'
  | 'Reddish'
  | 'ReddishHover'
  | 'ReddishActive'
  | 'ReddishAccent'
  | 'ReddishForeground'
  | 'Red'
  | 'RedHover'
  | 'RedActive'
  | 'RedAccent'
  | 'RedForeground'
  | 'Redlight'
  | 'RedlightHover'
  | 'RedlightActive'
  | 'RedlightAccent'
  | 'RedlightForeground'
  | 'Greydark'
  | 'GreydarkHover'
  | 'GreydarkActive'
  | 'GreydarkAccent'
  | 'GreydarkForeground'
  | 'Greylight'
  | 'GreylightHover'
  | 'GreylightActive'
  | 'GreylightAccent'
  | 'GreylightForeground'
  | 'Transparent'
  | (CSSColorValue & {})

export type Icon = SVGProps<SVGSVGElement> & {
  color?: Color
  size?: number
}

export type PropsEventHandler<E = SyntheticEvent, P = any> = (
  e?: E,
  props?: P
) => void | Promise<void> | boolean | Promise<boolean>
